<Program>        -> "main:" "()" "{" <Statements> "}"

<Statements>     -> <Statement>*
<Statement>      -> <Identifier> <AfterId> ";"
                  | <Loop>
                  | <Conditional>
                  | <Expression> ";"

<AfterId>        -> ":" <Type> [ "=" <Expression> ]   # Declaración
                  | "=" <Expression>                  # Asignación
                  
<Type>           -> <BasicType> <ArraySuffix>*
<BasicType>      -> "string" | "float" | "int" | "video" | "bool"
<ArraySuffix>    -> "[" <IntegerLiteral> "]"

<Expression>     -> <AssignmentExpr>
<AssignmentExpr> -> <LogicalOrExpr> ["=" <AssignmentExpr>]
<LogicalOrExpr>  -> <LogicalAndExpr> ("or" <LogicalAndExpr>)*
<LogicalAndExpr> -> <EqualityExpr> ("and" <EqualityExpr>)*
<EqualityExpr>   -> <RelationalExpr> [("==" | "!=") <RelationalExpr>]
<RelationalExpr> -> <AdditiveExpr> [("<" | ">" | "<=" | ">=") <AdditiveExpr>]
<AdditiveExpr>   -> <MultiplicativeExpr> [("+" | "-") <MultiplicativeExpr>]
<MultiplicativeExpr> -> <ConcatExpr> [("*" | "/" | "%") <ConcatExpr>]
<ConcatExpr>     -> <UnaryExpr> ("++" <UnaryExpr>)*
<UnaryExpr>      -> ["not" | "-" | "++"] <PrimaryExpr>
                  | <PrimaryExpr> ["++" | "--"]
<PrimaryExpr>    -> <Literal>
                  | <Identifier>
                  | "(" <Expression> ")"
                  | <FunctionCall>
                  | <MemberAccess>
                  | <ArrayAccess>

<FunctionCall>   -> <Identifier> "(" <Arguments> ")"
<MemberAccess>   -> <Identifier> "." <Identifier>
<ArrayAccess>    -> <Identifier> "[" <Expression> "]"

<Literal>        -> <StringLiteral>
                  | <NumericLiteral>
                  | <BooleanLiteral>
                  | <ListLiteral>

<StringLiteral>  -> "\"" [^"]* "\""
<NumericLiteral> -> <IntegerLiteral> | <FloatLiteral>
<IntegerLiteral> -> [0-9]+
<FloatLiteral>   -> [0-9]+ "." [0-9]+
<BooleanLiteral> -> "True" | "False"
<ListLiteral>    -> "[" [<Expression> ("," <Expression>)*] "]"

<Arguments>      -> <Expression> ("," <Expression>)*

<Conditional>    -> "if" "(" <Expression> ")" "{" <Statements> "}" ["else" "{" <Statements> "}"]
<Loop>           -> "while" "(" <Expression> ")" "{" <Statements> "}"