--- TOKENS ---
MAIN                 [ main ] -> 2:1
LBRACE               [ { ] -> 2:6
INT_TYPE             [ int ] -> 5:5
COLON                [ : ] -> 5:8
IDENTIFIER           [ ancho ] -> 5:13
ASSIGN               [ = ] -> 5:24
INT_LITERAL          [ 1920 ] -> 5:26
SEMICOLON            [ ; ] -> 5:30
STRING_TYPE          [ string ] -> 6:5
COLON                [ : ] -> 6:11
IDENTIFIER           [ alto ] -> 6:16
ASSIGN               [ = ] -> 6:27
STRING_LITERAL       [ 1080" ] -> 6:29
SEMICOLON            [ ; ] -> 6:35
FLOAT_TYPE           [ float ] -> 7:5
COLON                [ : ] -> 7:10
IDENTIFIER           [ escala ] -> 7:13
ASSIGN               [ = ] -> 7:24
FLOAT_LITERAL        [ 1.5 ] -> 7:26
SEMICOLON            [ ; ] -> 7:29
STRING_TYPE          [ string ] -> 8:5
COLON                [ : ] -> 8:11
IDENTIFIER           [ titulo ] -> 8:13
ASSIGN               [ = ] -> 8:24
STRING_LITERAL       [ Mi video personal" ] -> 8:26
SEMICOLON            [ ; ] -> 8:45
VIDEO_TYPE           [ video ] -> 10:5
COLON                [ : ] -> 10:10
IDENTIFIER           [ intro ] -> 10:13
ASSIGN               [ = ] -> 10:24
STRING_LITERAL       [ intro.mp4" ] -> 10:26
SEMICOLON            [ ; ] -> 10:37
AUDIO_TYPE           [ audio ] -> 11:5
COLON                [ : ] -> 11:10
IDENTIFIER           [ cancion ] -> 11:13
ASSIGN               [ = ] -> 11:24
STRING_LITERAL       [ musica.mp3" ] -> 11:26
SEMICOLON            [ ; ] -> 11:38
IDENTIFIER           [ ancho ] -> 14:5
ASSIGN               [ = ] -> 14:12
IDENTIFIER           [ ancho ] -> 14:14
PLUS                 [ + ] -> 14:20
INT_LITERAL          [ 80 ] -> 14:22
DIV                  [ / ] -> 14:25
INT_LITERAL          [ 2 ] -> 14:27
MINUS                [ - ] -> 14:29
INT_LITERAL          [ 10 ] -> 14:31
SEMICOLON            [ ; ] -> 14:33
IDENTIFIER           [ escala ] -> 15:5
ASSIGN               [ = ] -> 15:12
LPAREN               [ ( ] -> 15:14
IDENTIFIER           [ escala ] -> 15:15
MULT                 [ * ] -> 15:22
FLOAT_LITERAL        [ 2.0 ] -> 15:24
RPAREN               [ ) ] -> 15:27
DIV                  [ / ] -> 15:29
FLOAT_LITERAL        [ 3.0 ] -> 15:31
SEMICOLON            [ ; ] -> 15:34
IDENTIFIER           [ intro ] -> 18:5
ASSIGN               [ = ] -> 18:11
VIDEO_RESIZE         [ @resize ] -> 18:13
LBRACKET             [ [ ] -> 18:20
IDENTIFIER           [ intro ] -> 18:21
COMMA                [ , ] -> 18:26
INT_LITERAL          [ 1280 ] -> 18:28
COMMA                [ , ] -> 18:32
INT_LITERAL          [ 720 ] -> 18:34
RBRACKET             [ ] ] -> 18:37
SEMICOLON            [ ; ] -> 18:38
IDENTIFIER           [ intro ] -> 19:5
ASSIGN               [ = ] -> 19:11
VIDEO_FLIP           [ @flip ] -> 19:13
LBRACKET             [ [ ] -> 19:18
STRING_LITERAL       [ horizontal" ] -> 19:19
RBRACKET             [ ] ] -> 19:31
SEMICOLON            [ ; ] -> 19:32
IDENTIFIER           [ intro ] -> 20:5
ASSIGN               [ = ] -> 20:11
VIDEO_VELOCIDAD      [ @velocidad ] -> 20:13
LBRACKET             [ [ ] -> 20:23
INT_LITERAL          [ 1 ] -> 20:24
RBRACKET             [ ] ] -> 20:25
SEMICOLON            [ ; ] -> 20:26
IDENTIFIER           [ intro ] -> 21:5
ASSIGN               [ = ] -> 21:11
VIDEO_FADEIN         [ @fadein ] -> 21:13
LBRACKET             [ [ ] -> 21:20
FLOAT_LITERAL        [ 2.0 ] -> 21:21
RBRACKET             [ ] ] -> 21:24
SEMICOLON            [ ; ] -> 21:25
IDENTIFIER           [ intro ] -> 22:5
ASSIGN               [ = ] -> 22:11
VIDEO_FADEOUT        [ @fadeout ] -> 22:13
LBRACKET             [ [ ] -> 22:21
FLOAT_LITERAL        [ 3.5 ] -> 22:22
RBRACKET             [ ] ] -> 22:25
SEMICOLON            [ ; ] -> 22:26
IDENTIFIER           [ intro ] -> 23:5
ASSIGN               [ = ] -> 23:11
VIDEO_SILENCIO       [ @silencio ] -> 23:13
LBRACKET             [ [ ] -> 23:22
RBRACKET             [ ] ] -> 23:23
SEMICOLON            [ ; ] -> 23:24
IDENTIFIER           [ intro ] -> 24:5
ASSIGN               [ = ] -> 24:11
VIDEO_QUITAR_AUDIO   [ @quitar_audio ] -> 24:13
LBRACKET             [ [ ] -> 24:26
RBRACKET             [ ] ] -> 24:27
SEMICOLON            [ ; ] -> 24:28
IDENTIFIER           [ intro ] -> 25:5
ASSIGN               [ = ] -> 25:11
VIDEO_AGREGAR_MUSICA [ @agregar_musica ] -> 25:13
LBRACKET             [ [ ] -> 25:28
STRING_LITERAL       [ musica.mp3" ] -> 25:29
RBRACKET             [ ] ] -> 25:41
SEMICOLON            [ ; ] -> 25:42
IDENTIFIER           [ intro ] -> 26:5
ASSIGN               [ = ] -> 26:11
VIDEO_CONCATENAR     [ @concatenar ] -> 26:13
LBRACKET             [ [ ] -> 26:24
IDENTIFIER           [ intro ] -> 26:25
COMMA                [ , ] -> 26:30
IDENTIFIER           [ intro ] -> 26:32
RBRACKET             [ ] ] -> 26:37
SEMICOLON            [ ; ] -> 26:38
IDENTIFIER           [ intro ] -> 27:5
ASSIGN               [ = ] -> 27:11
VIDEO_CORTAR         [ @cortar ] -> 27:13
LBRACKET             [ [ ] -> 27:20
INT_LITERAL          [ 10 ] -> 27:21
COMMA                [ , ] -> 27:23
INT_LITERAL          [ 20 ] -> 27:25
RBRACKET             [ ] ] -> 27:27
SEMICOLON            [ ; ] -> 27:28
INT_TYPE             [ int ] -> 29:5
COLON                [ : ] -> 29:8
IDENTIFIER           [ es_horizontal ] -> 29:10
ASSIGN               [ = ] -> 29:24
INT_LITERAL          [ 1 ] -> 29:26
SEMICOLON            [ ; ] -> 29:27
IF                   [ if ] -> 32:5
LPAREN               [ ( ] -> 32:8
IDENTIFIER           [ es_horizontal ] -> 32:9
RPAREN               [ ) ] -> 32:22
LBRACE               [ { ] -> 32:24
IDENTIFIER           [ intro ] -> 33:9
ASSIGN               [ = ] -> 33:15
VIDEO_FLIP           [ @flip ] -> 33:17
LBRACKET             [ [ ] -> 33:22
STRING_LITERAL       [ vertical" ] -> 33:23
RBRACKET             [ ] ] -> 33:33
SEMICOLON            [ ; ] -> 33:34
RBRACE               [ } ] -> 34:5
ELSE                 [ else ] -> 34:7
LBRACE               [ { ] -> 34:12
IDENTIFIER           [ intro ] -> 35:9
ASSIGN               [ = ] -> 35:15
VIDEO_FLIP           [ @flip ] -> 35:17
LBRACKET             [ [ ] -> 35:22
STRING_LITERAL       [ horizontal" ] -> 35:23
RBRACKET             [ ] ] -> 35:35
SEMICOLON            [ ; ] -> 35:36
RBRACE               [ } ] -> 36:5
INT_TYPE             [ int ] -> 38:5
COLON                [ : ] -> 38:8
IDENTIFIER           [ i ] -> 38:10
ASSIGN               [ = ] -> 38:12
INT_LITERAL          [ 0 ] -> 38:14
SEMICOLON            [ ; ] -> 38:15
IF                   [ if ] -> 46:5
LPAREN               [ ( ] -> 46:8
IDENTIFIER           [ es_horizontal ] -> 46:9
EQ                   [ == ] -> 46:23
INT_LITERAL          [ 0 ] -> 46:26
RPAREN               [ ) ] -> 46:27
LBRACE               [ { ] -> 46:29
INT_TYPE             [ int ] -> 47:9
COLON                [ : ] -> 47:12
IDENTIFIER           [ i ] -> 47:14
ASSIGN               [ = ] -> 47:16
INT_LITERAL          [ 0 ] -> 47:18
SEMICOLON            [ ; ] -> 47:19
WHILE                [ while ] -> 48:9
LPAREN               [ ( ] -> 48:15
IDENTIFIER           [ i ] -> 48:16
LT                   [ < ] -> 48:18
INT_LITERAL          [ 3 ] -> 48:20
RPAREN               [ ) ] -> 48:21
LBRACE               [ { ] -> 48:23
IDENTIFIER           [ intro ] -> 49:13
ASSIGN               [ = ] -> 49:19
VIDEO_FLIP           [ @flip ] -> 49:21
LBRACKET             [ [ ] -> 49:26
STRING_LITERAL       [ vertical" ] -> 49:27
RBRACKET             [ ] ] -> 49:37
SEMICOLON            [ ; ] -> 49:38
IDENTIFIER           [ i ] -> 50:13
ASSIGN               [ = ] -> 50:15
IDENTIFIER           [ i ] -> 50:17
PLUS                 [ + ] -> 50:19
INT_LITERAL          [ 1 ] -> 50:21
SEMICOLON            [ ; ] -> 50:22
RBRACE               [ } ] -> 51:9
RBRACE               [ } ] -> 52:5
ELSE                 [ else ] -> 52:7
LBRACE               [ { ] -> 52:12
IDENTIFIER           [ intro ] -> 53:9
ASSIGN               [ = ] -> 53:15
VIDEO_FLIP           [ @flip ] -> 53:17
LBRACKET             [ [ ] -> 53:22
STRING_LITERAL       [ horizontal" ] -> 53:23
RBRACKET             [ ] ] -> 53:35
SEMICOLON            [ ; ] -> 53:36
RBRACE               [ } ] -> 54:5
INT_TYPE             [ int ] -> 56:5
COLON                [ : ] -> 56:8
IDENTIFIER           [ i ] -> 56:10
ASSIGN               [ = ] -> 56:12
INT_LITERAL          [ 0 ] -> 56:14
SEMICOLON            [ ; ] -> 56:15
WHILE                [ while ] -> 57:5
LPAREN               [ ( ] -> 57:11
IDENTIFIER           [ i ] -> 57:12
LT                   [ < ] -> 57:14
INT_LITERAL          [ 3 ] -> 57:16
RPAREN               [ ) ] -> 57:17
LBRACE               [ { ] -> 57:19
IDENTIFIER           [ intro ] -> 58:9
ASSIGN               [ = ] -> 58:15
VIDEO_VELOCIDAD      [ @velocidad ] -> 58:17
LBRACKET             [ [ ] -> 58:27
INT_LITERAL          [ 10 ] -> 58:28
RBRACKET             [ ] ] -> 58:30
SEMICOLON            [ ; ] -> 58:31
INT_TYPE             [ int ] -> 59:9
COLON                [ : ] -> 59:12
IDENTIFIER           [ j ] -> 59:14
ASSIGN               [ = ] -> 59:16
INT_LITERAL          [ 0 ] -> 59:18
SEMICOLON            [ ; ] -> 59:19
WHILE                [ while ] -> 60:9
LPAREN               [ ( ] -> 60:15
IDENTIFIER           [ j ] -> 60:16
LT                   [ < ] -> 60:18
INT_LITERAL          [ 3 ] -> 60:20
RPAREN               [ ) ] -> 60:21
LBRACE               [ { ] -> 60:23
IDENTIFIER           [ intro ] -> 61:13
ASSIGN               [ = ] -> 61:19
VIDEO_VELOCIDAD      [ @velocidad ] -> 61:21
LBRACKET             [ [ ] -> 61:31
INT_LITERAL          [ 10 ] -> 61:32
RBRACKET             [ ] ] -> 61:34
SEMICOLON            [ ; ] -> 61:35
IDENTIFIER           [ j ] -> 62:13
ASSIGN               [ = ] -> 62:15
IDENTIFIER           [ j ] -> 62:17
PLUS                 [ + ] -> 62:19
INT_LITERAL          [ 1 ] -> 62:21
SEMICOLON            [ ; ] -> 62:22
RBRACE               [ } ] -> 63:9
IDENTIFIER           [ i ] -> 64:9
ASSIGN               [ = ] -> 64:11
IDENTIFIER           [ i ] -> 64:13
PLUS                 [ + ] -> 64:15
INT_LITERAL          [ 1 ] -> 64:17
SEMICOLON            [ ; ] -> 64:18
RBRACE               [ } ] -> 65:5
INT_TYPE             [ int ] -> 67:5
COLON                [ : ] -> 67:8
IDENTIFIER           [ i ] -> 67:10
ASSIGN               [ = ] -> 67:12
INT_LITERAL          [ 0 ] -> 67:14
SEMICOLON            [ ; ] -> 67:15
WHILE                [ while ] -> 68:5
LPAREN               [ ( ] -> 68:11
IDENTIFIER           [ i ] -> 68:12
LT                   [ < ] -> 68:14
INT_LITERAL          [ 3 ] -> 68:16
RPAREN               [ ) ] -> 68:17
LBRACE               [ { ] -> 68:19
IDENTIFIER           [ intro ] -> 69:9
ASSIGN               [ = ] -> 69:15
VIDEO_VELOCIDAD      [ @velocidad ] -> 69:17
LBRACKET             [ [ ] -> 69:27
INT_LITERAL          [ 10 ] -> 69:28
RBRACKET             [ ] ] -> 69:30
SEMICOLON            [ ; ] -> 69:31
INT_TYPE             [ int ] -> 71:9
COLON                [ : ] -> 71:12
IDENTIFIER           [ j ] -> 71:14
ASSIGN               [ = ] -> 71:16
INT_LITERAL          [ 0 ] -> 71:18
SEMICOLON            [ ; ] -> 71:19
IF                   [ if ] -> 72:9
LPAREN               [ ( ] -> 72:12
IDENTIFIER           [ i ] -> 72:13
EQ                   [ == ] -> 72:15
INT_LITERAL          [ 5 ] -> 72:18
RPAREN               [ ) ] -> 72:19
LBRACE               [ { ] -> 72:20
WHILE                [ while ] -> 73:13
LPAREN               [ ( ] -> 73:19
IDENTIFIER           [ j ] -> 73:20
LT                   [ < ] -> 73:22
INT_LITERAL          [ 30 ] -> 73:24
RPAREN               [ ) ] -> 73:26
LBRACE               [ { ] -> 73:28
IDENTIFIER           [ j ] -> 74:17
ASSIGN               [ = ] -> 74:19
IDENTIFIER           [ j ] -> 74:21
PLUS                 [ + ] -> 74:23
INT_LITERAL          [ 1 ] -> 74:25
SEMICOLON            [ ; ] -> 74:26
RBRACE               [ } ] -> 75:13
RBRACE               [ } ] -> 76:9
ELSE                 [ else ] -> 76:11
LBRACE               [ { ] -> 76:16
INT_TYPE             [ int ] -> 77:13
COLON                [ : ] -> 77:16
IDENTIFIER           [ j ] -> 77:18
ASSIGN               [ = ] -> 77:20
INT_LITERAL          [ 15 ] -> 77:22
SEMICOLON            [ ; ] -> 77:24
WHILE                [ while ] -> 78:13
LPAREN               [ ( ] -> 78:19
IDENTIFIER           [ j ] -> 78:20
GT                   [ > ] -> 78:22
INT_LITERAL          [ 0 ] -> 78:24
RPAREN               [ ) ] -> 78:25
LBRACE               [ { ] -> 78:27
IDENTIFIER           [ j ] -> 79:17
ASSIGN               [ = ] -> 79:19
IDENTIFIER           [ j ] -> 79:21
MINUS                [ - ] -> 79:23
INT_LITERAL          [ 1 ] -> 79:25
SEMICOLON            [ ; ] -> 79:26
RBRACE               [ } ] -> 80:13
RBRACE               [ } ] -> 81:9
IDENTIFIER           [ i ] -> 83:9
ASSIGN               [ = ] -> 83:11
IDENTIFIER           [ i ] -> 83:13
PLUS                 [ + ] -> 83:15
INT_LITERAL          [ 1 ] -> 83:17
SEMICOLON            [ ; ] -> 83:18
RBRACE               [ } ] -> 84:5
EXPORT               [ exportar ] -> 87:5
IDENTIFIER           [ intro ] -> 87:14
AS                   [ como ] -> 87:22
STRING_LITERAL       [ salida.mp4" ] -> 87:27
SEMICOLON            [ ; ] -> 87:39
EXPORT               [ exportar ] -> 88:5
IDENTIFIER           [ cancion ] -> 88:14
AS                   [ como ] -> 88:22
STRING_LITERAL       [ salida.mp3" ] -> 88:27
SEMICOLON            [ ; ] -> 88:39
RBRACE               [ } ] -> 89:1
EOF

Análisis léxico completado sin errores
=== Inicio del parser LL(1) paso a paso ===

[EXPAND]   No-terminal: Program          Lookahead: MAIN            ('main')
[RULE]     Program         -> MAIN Block EOF

[MATCH]    Línea   2, Col   1  Terminal esperado: MAIN             Token actual: MAIN            ('main')
[EXPAND]   No-terminal: Block            Lookahead: LBRACE          ('{')
[RULE]     Block           -> LBRACE StmtList RBRACE

[MATCH]    Línea   2, Col   6  Terminal esperado: LBRACE           Token actual: LBRACE          ('{')
[EXPAND]   No-terminal: StmtList         Lookahead: INT_TYPE        ('int')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: INT_TYPE        ('int')
[RULE]     Stmt            -> VarDecl SEMICOLON

[EXPAND]   No-terminal: VarDecl          Lookahead: INT_TYPE        ('int')
[RULE]     VarDecl         -> Type COLON IDENTIFIER VarInitOpt

[EXPAND]   No-terminal: Type             Lookahead: INT_TYPE        ('int')
[RULE]     Type            -> INT_TYPE

[MATCH]    Línea   5, Col   5  Terminal esperado: INT_TYPE         Token actual: INT_TYPE        ('int')
[MATCH]    Línea   5, Col   8  Terminal esperado: COLON            Token actual: COLON           (':')
[MATCH]    Línea   5, Col  13  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('ancho')
[EXPAND]   No-terminal: VarInitOpt       Lookahead: ASSIGN          ('=')
[RULE]     VarInitOpt      -> ASSIGN Expr

[MATCH]    Línea   5, Col  24  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: INT_LITERAL     ('1920')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: INT_LITERAL     ('1920')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: INT_LITERAL     ('1920')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: INT_LITERAL     ('1920')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: INT_LITERAL     ('1920')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: INT_LITERAL     ('1920')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('1920')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('1920')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea   5, Col  26  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('1920')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea   5, Col  30  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: STRING_TYPE     ('string')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: STRING_TYPE     ('string')
[RULE]     Stmt            -> VarDecl SEMICOLON

[EXPAND]   No-terminal: VarDecl          Lookahead: STRING_TYPE     ('string')
[RULE]     VarDecl         -> Type COLON IDENTIFIER VarInitOpt

[EXPAND]   No-terminal: Type             Lookahead: STRING_TYPE     ('string')
[RULE]     Type            -> STRING_TYPE

[MATCH]    Línea   6, Col   5  Terminal esperado: STRING_TYPE      Token actual: STRING_TYPE     ('string')
[MATCH]    Línea   6, Col  11  Terminal esperado: COLON            Token actual: COLON           (':')
[MATCH]    Línea   6, Col  16  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('alto')
[EXPAND]   No-terminal: VarInitOpt       Lookahead: ASSIGN          ('=')
[RULE]     VarInitOpt      -> ASSIGN Expr

[MATCH]    Línea   6, Col  27  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: STRING_LITERAL  ('1080"')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: STRING_LITERAL  ('1080"')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: STRING_LITERAL  ('1080"')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: STRING_LITERAL  ('1080"')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: STRING_LITERAL  ('1080"')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: STRING_LITERAL  ('1080"')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: STRING_LITERAL  ('1080"')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: STRING_LITERAL  ('1080"')
[RULE]     Factor          -> STRING_LITERAL

[MATCH]    Línea   6, Col  29  Terminal esperado: STRING_LITERAL   Token actual: STRING_LITERAL  ('1080"')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea   6, Col  35  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: FLOAT_TYPE      ('float')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: FLOAT_TYPE      ('float')
[RULE]     Stmt            -> VarDecl SEMICOLON

[EXPAND]   No-terminal: VarDecl          Lookahead: FLOAT_TYPE      ('float')
[RULE]     VarDecl         -> Type COLON IDENTIFIER VarInitOpt

[EXPAND]   No-terminal: Type             Lookahead: FLOAT_TYPE      ('float')
[RULE]     Type            -> FLOAT_TYPE

[MATCH]    Línea   7, Col   5  Terminal esperado: FLOAT_TYPE       Token actual: FLOAT_TYPE      ('float')
[MATCH]    Línea   7, Col  10  Terminal esperado: COLON            Token actual: COLON           (':')
[MATCH]    Línea   7, Col  13  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('escala')
[EXPAND]   No-terminal: VarInitOpt       Lookahead: ASSIGN          ('=')
[RULE]     VarInitOpt      -> ASSIGN Expr

[MATCH]    Línea   7, Col  24  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: FLOAT_LITERAL   ('1.5')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: FLOAT_LITERAL   ('1.5')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: FLOAT_LITERAL   ('1.5')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: FLOAT_LITERAL   ('1.5')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: FLOAT_LITERAL   ('1.5')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: FLOAT_LITERAL   ('1.5')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: FLOAT_LITERAL   ('1.5')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: FLOAT_LITERAL   ('1.5')
[RULE]     Factor          -> FLOAT_LITERAL

[MATCH]    Línea   7, Col  26  Terminal esperado: FLOAT_LITERAL    Token actual: FLOAT_LITERAL   ('1.5')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea   7, Col  29  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: STRING_TYPE     ('string')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: STRING_TYPE     ('string')
[RULE]     Stmt            -> VarDecl SEMICOLON

[EXPAND]   No-terminal: VarDecl          Lookahead: STRING_TYPE     ('string')
[RULE]     VarDecl         -> Type COLON IDENTIFIER VarInitOpt

[EXPAND]   No-terminal: Type             Lookahead: STRING_TYPE     ('string')
[RULE]     Type            -> STRING_TYPE

[MATCH]    Línea   8, Col   5  Terminal esperado: STRING_TYPE      Token actual: STRING_TYPE     ('string')
[MATCH]    Línea   8, Col  11  Terminal esperado: COLON            Token actual: COLON           (':')
[MATCH]    Línea   8, Col  13  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('titulo')
[EXPAND]   No-terminal: VarInitOpt       Lookahead: ASSIGN          ('=')
[RULE]     VarInitOpt      -> ASSIGN Expr

[MATCH]    Línea   8, Col  24  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: STRING_LITERAL  ('Mi video personal"')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: STRING_LITERAL  ('Mi video personal"')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: STRING_LITERAL  ('Mi video personal"')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: STRING_LITERAL  ('Mi video personal"')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: STRING_LITERAL  ('Mi video personal"')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: STRING_LITERAL  ('Mi video personal"')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: STRING_LITERAL  ('Mi video personal"')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: STRING_LITERAL  ('Mi video personal"')
[RULE]     Factor          -> STRING_LITERAL

[MATCH]    Línea   8, Col  26  Terminal esperado: STRING_LITERAL   Token actual: STRING_LITERAL  ('Mi video personal"')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea   8, Col  45  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: VIDEO_TYPE      ('video')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: VIDEO_TYPE      ('video')
[RULE]     Stmt            -> VarDecl SEMICOLON

[EXPAND]   No-terminal: VarDecl          Lookahead: VIDEO_TYPE      ('video')
[RULE]     VarDecl         -> Type COLON IDENTIFIER VarInitOpt

[EXPAND]   No-terminal: Type             Lookahead: VIDEO_TYPE      ('video')
[RULE]     Type            -> VIDEO_TYPE

[MATCH]    Línea  10, Col   5  Terminal esperado: VIDEO_TYPE       Token actual: VIDEO_TYPE      ('video')
[MATCH]    Línea  10, Col  10  Terminal esperado: COLON            Token actual: COLON           (':')
[MATCH]    Línea  10, Col  13  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[EXPAND]   No-terminal: VarInitOpt       Lookahead: ASSIGN          ('=')
[RULE]     VarInitOpt      -> ASSIGN Expr

[MATCH]    Línea  10, Col  24  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: STRING_LITERAL  ('intro.mp4"')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: STRING_LITERAL  ('intro.mp4"')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: STRING_LITERAL  ('intro.mp4"')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: STRING_LITERAL  ('intro.mp4"')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: STRING_LITERAL  ('intro.mp4"')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: STRING_LITERAL  ('intro.mp4"')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: STRING_LITERAL  ('intro.mp4"')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: STRING_LITERAL  ('intro.mp4"')
[RULE]     Factor          -> STRING_LITERAL

[MATCH]    Línea  10, Col  26  Terminal esperado: STRING_LITERAL   Token actual: STRING_LITERAL  ('intro.mp4"')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  10, Col  37  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: AUDIO_TYPE      ('audio')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: AUDIO_TYPE      ('audio')
[RULE]     Stmt            -> VarDecl SEMICOLON

[EXPAND]   No-terminal: VarDecl          Lookahead: AUDIO_TYPE      ('audio')
[RULE]     VarDecl         -> Type COLON IDENTIFIER VarInitOpt

[EXPAND]   No-terminal: Type             Lookahead: AUDIO_TYPE      ('audio')
[RULE]     Type            -> AUDIO_TYPE

[MATCH]    Línea  11, Col   5  Terminal esperado: AUDIO_TYPE       Token actual: AUDIO_TYPE      ('audio')
[MATCH]    Línea  11, Col  10  Terminal esperado: COLON            Token actual: COLON           (':')
[MATCH]    Línea  11, Col  13  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('cancion')
[EXPAND]   No-terminal: VarInitOpt       Lookahead: ASSIGN          ('=')
[RULE]     VarInitOpt      -> ASSIGN Expr

[MATCH]    Línea  11, Col  24  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: STRING_LITERAL  ('musica.mp3"')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: STRING_LITERAL  ('musica.mp3"')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: STRING_LITERAL  ('musica.mp3"')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: STRING_LITERAL  ('musica.mp3"')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: STRING_LITERAL  ('musica.mp3"')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: STRING_LITERAL  ('musica.mp3"')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: STRING_LITERAL  ('musica.mp3"')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: STRING_LITERAL  ('musica.mp3"')
[RULE]     Factor          -> STRING_LITERAL

[MATCH]    Línea  11, Col  26  Terminal esperado: STRING_LITERAL   Token actual: STRING_LITERAL  ('musica.mp3"')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  11, Col  38  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('ancho')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('ancho')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('ancho')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  14, Col   5  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('ancho')
[MATCH]    Línea  14, Col  12  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: IDENTIFIER      ('ancho')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: IDENTIFIER      ('ancho')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: IDENTIFIER      ('ancho')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: IDENTIFIER      ('ancho')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: IDENTIFIER      ('ancho')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: IDENTIFIER      ('ancho')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: IDENTIFIER      ('ancho')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: IDENTIFIER      ('ancho')
[RULE]     Factor          -> IDENTIFIER

[MATCH]    Línea  14, Col  14  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('ancho')
[EXPAND]   No-terminal: Term'            Lookahead: PLUS            ('+')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: PLUS            ('+')
[RULE]     AddExpr'        -> PLUS Term AddExpr'

[MATCH]    Línea  14, Col  20  Terminal esperado: PLUS             Token actual: PLUS            ('+')
[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('80')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('80')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  14, Col  22  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('80')
[EXPAND]   No-terminal: Term'            Lookahead: DIV             ('/')
[RULE]     Term'           -> DIV Factor Term'

[MATCH]    Línea  14, Col  25  Terminal esperado: DIV              Token actual: DIV             ('/')
[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('2')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  14, Col  27  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('2')
[EXPAND]   No-terminal: Term'            Lookahead: MINUS           ('-')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: MINUS           ('-')
[RULE]     AddExpr'        -> MINUS Term AddExpr'

[MATCH]    Línea  14, Col  29  Terminal esperado: MINUS            Token actual: MINUS           ('-')
[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('10')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('10')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  14, Col  31  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('10')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  14, Col  33  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('escala')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('escala')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('escala')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  15, Col   5  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('escala')
[MATCH]    Línea  15, Col  12  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: LPAREN          ('(')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: LPAREN          ('(')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: LPAREN          ('(')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: LPAREN          ('(')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: LPAREN          ('(')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: LPAREN          ('(')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: LPAREN          ('(')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: LPAREN          ('(')
[RULE]     Factor          -> LPAREN Expr RPAREN

[MATCH]    Línea  15, Col  14  Terminal esperado: LPAREN           Token actual: LPAREN          ('(')
[EXPAND]   No-terminal: Expr             Lookahead: IDENTIFIER      ('escala')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: IDENTIFIER      ('escala')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: IDENTIFIER      ('escala')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: IDENTIFIER      ('escala')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: IDENTIFIER      ('escala')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: IDENTIFIER      ('escala')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: IDENTIFIER      ('escala')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: IDENTIFIER      ('escala')
[RULE]     Factor          -> IDENTIFIER

[MATCH]    Línea  15, Col  15  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('escala')
[EXPAND]   No-terminal: Term'            Lookahead: MULT            ('*')
[RULE]     Term'           -> MULT Factor Term'

[MATCH]    Línea  15, Col  22  Terminal esperado: MULT             Token actual: MULT            ('*')
[EXPAND]   No-terminal: Factor           Lookahead: FLOAT_LITERAL   ('2.0')
[RULE]     Factor          -> FLOAT_LITERAL

[MATCH]    Línea  15, Col  24  Terminal esperado: FLOAT_LITERAL    Token actual: FLOAT_LITERAL   ('2.0')
[EXPAND]   No-terminal: Term'            Lookahead: RPAREN          (')')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: RPAREN          (')')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: RPAREN          (')')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: RPAREN          (')')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: RPAREN          (')')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: RPAREN          (')')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  15, Col  27  Terminal esperado: RPAREN           Token actual: RPAREN          (')')
[EXPAND]   No-terminal: Term'            Lookahead: DIV             ('/')
[RULE]     Term'           -> DIV Factor Term'

[MATCH]    Línea  15, Col  29  Terminal esperado: DIV              Token actual: DIV             ('/')
[EXPAND]   No-terminal: Factor           Lookahead: FLOAT_LITERAL   ('3.0')
[RULE]     Factor          -> FLOAT_LITERAL

[MATCH]    Línea  15, Col  31  Terminal esperado: FLOAT_LITERAL    Token actual: FLOAT_LITERAL   ('3.0')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  15, Col  34  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('intro')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('intro')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('intro')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  18, Col   5  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  18, Col  11  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: VIDEO_RESIZE    ('@resize')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: VIDEO_RESIZE    ('@resize')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: VIDEO_RESIZE    ('@resize')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: VIDEO_RESIZE    ('@resize')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: VIDEO_RESIZE    ('@resize')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: VIDEO_RESIZE    ('@resize')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: VIDEO_RESIZE    ('@resize')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: VIDEO_RESIZE    ('@resize')
[RULE]     Factor          -> FunctionCall

[EXPAND]   No-terminal: FunctionCall     Lookahead: VIDEO_RESIZE    ('@resize')
[RULE]     FunctionCall    -> VIDEO_RESIZE LBRACKET ResizeArgs RBRACKET

[MATCH]    Línea  18, Col  13  Terminal esperado: VIDEO_RESIZE     Token actual: VIDEO_RESIZE    ('@resize')
[MATCH]    Línea  18, Col  20  Terminal esperado: LBRACKET         Token actual: LBRACKET        ('[')
[EXPAND]   No-terminal: ResizeArgs       Lookahead: IDENTIFIER      ('intro')
[RULE]     ResizeArgs      -> IDENTIFIER COMMA INT_LITERAL COMMA INT_LITERAL

[MATCH]    Línea  18, Col  21  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  18, Col  26  Terminal esperado: COMMA            Token actual: COMMA           (',')
[MATCH]    Línea  18, Col  28  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('1280')
[MATCH]    Línea  18, Col  32  Terminal esperado: COMMA            Token actual: COMMA           (',')
[MATCH]    Línea  18, Col  34  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('720')
[MATCH]    Línea  18, Col  37  Terminal esperado: RBRACKET         Token actual: RBRACKET        (']')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  18, Col  38  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('intro')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('intro')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('intro')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  19, Col   5  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  19, Col  11  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     Factor          -> FunctionCall

[EXPAND]   No-terminal: FunctionCall     Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     FunctionCall    -> VIDEO_FLIP LBRACKET FlipArgs RBRACKET

[MATCH]    Línea  19, Col  13  Terminal esperado: VIDEO_FLIP       Token actual: VIDEO_FLIP      ('@flip')
[MATCH]    Línea  19, Col  18  Terminal esperado: LBRACKET         Token actual: LBRACKET        ('[')
[EXPAND]   No-terminal: FlipArgs         Lookahead: STRING_LITERAL  ('horizontal"')
[RULE]     FlipArgs        -> STRING_LITERAL

[MATCH]    Línea  19, Col  19  Terminal esperado: STRING_LITERAL   Token actual: STRING_LITERAL  ('horizontal"')
[MATCH]    Línea  19, Col  31  Terminal esperado: RBRACKET         Token actual: RBRACKET        (']')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  19, Col  32  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('intro')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('intro')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('intro')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  20, Col   5  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  20, Col  11  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     Factor          -> FunctionCall

[EXPAND]   No-terminal: FunctionCall     Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     FunctionCall    -> VIDEO_VELOCIDAD LBRACKET VelocidadArgs RBRACKET

[MATCH]    Línea  20, Col  13  Terminal esperado: VIDEO_VELOCIDAD  Token actual: VIDEO_VELOCIDAD ('@velocidad')
[MATCH]    Línea  20, Col  23  Terminal esperado: LBRACKET         Token actual: LBRACKET        ('[')
[EXPAND]   No-terminal: VelocidadArgs    Lookahead: INT_LITERAL     ('1')
[RULE]     VelocidadArgs   -> Number

[EXPAND]   No-terminal: Number           Lookahead: INT_LITERAL     ('1')
[RULE]     Number          -> INT_LITERAL

[MATCH]    Línea  20, Col  24  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('1')
[MATCH]    Línea  20, Col  25  Terminal esperado: RBRACKET         Token actual: RBRACKET        (']')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  20, Col  26  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('intro')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('intro')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('intro')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  21, Col   5  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  21, Col  11  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: VIDEO_FADEIN    ('@fadein')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: VIDEO_FADEIN    ('@fadein')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: VIDEO_FADEIN    ('@fadein')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: VIDEO_FADEIN    ('@fadein')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: VIDEO_FADEIN    ('@fadein')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: VIDEO_FADEIN    ('@fadein')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: VIDEO_FADEIN    ('@fadein')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: VIDEO_FADEIN    ('@fadein')
[RULE]     Factor          -> FunctionCall

[EXPAND]   No-terminal: FunctionCall     Lookahead: VIDEO_FADEIN    ('@fadein')
[RULE]     FunctionCall    -> VIDEO_FADEIN LBRACKET FadeInArgs RBRACKET

[MATCH]    Línea  21, Col  13  Terminal esperado: VIDEO_FADEIN     Token actual: VIDEO_FADEIN    ('@fadein')
[MATCH]    Línea  21, Col  20  Terminal esperado: LBRACKET         Token actual: LBRACKET        ('[')
[EXPAND]   No-terminal: FadeInArgs       Lookahead: FLOAT_LITERAL   ('2.0')
[RULE]     FadeInArgs      -> Number

[EXPAND]   No-terminal: Number           Lookahead: FLOAT_LITERAL   ('2.0')
[RULE]     Number          -> FLOAT_LITERAL

[MATCH]    Línea  21, Col  21  Terminal esperado: FLOAT_LITERAL    Token actual: FLOAT_LITERAL   ('2.0')
[MATCH]    Línea  21, Col  24  Terminal esperado: RBRACKET         Token actual: RBRACKET        (']')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  21, Col  25  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('intro')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('intro')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('intro')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  22, Col   5  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  22, Col  11  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: VIDEO_FADEOUT   ('@fadeout')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: VIDEO_FADEOUT   ('@fadeout')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: VIDEO_FADEOUT   ('@fadeout')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: VIDEO_FADEOUT   ('@fadeout')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: VIDEO_FADEOUT   ('@fadeout')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: VIDEO_FADEOUT   ('@fadeout')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: VIDEO_FADEOUT   ('@fadeout')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: VIDEO_FADEOUT   ('@fadeout')
[RULE]     Factor          -> FunctionCall

[EXPAND]   No-terminal: FunctionCall     Lookahead: VIDEO_FADEOUT   ('@fadeout')
[RULE]     FunctionCall    -> VIDEO_FADEOUT LBRACKET FadeOutArgs RBRACKET

[MATCH]    Línea  22, Col  13  Terminal esperado: VIDEO_FADEOUT    Token actual: VIDEO_FADEOUT   ('@fadeout')
[MATCH]    Línea  22, Col  21  Terminal esperado: LBRACKET         Token actual: LBRACKET        ('[')
[EXPAND]   No-terminal: FadeOutArgs      Lookahead: FLOAT_LITERAL   ('3.5')
[RULE]     FadeOutArgs     -> Number

[EXPAND]   No-terminal: Number           Lookahead: FLOAT_LITERAL   ('3.5')
[RULE]     Number          -> FLOAT_LITERAL

[MATCH]    Línea  22, Col  22  Terminal esperado: FLOAT_LITERAL    Token actual: FLOAT_LITERAL   ('3.5')
[MATCH]    Línea  22, Col  25  Terminal esperado: RBRACKET         Token actual: RBRACKET        (']')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  22, Col  26  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('intro')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('intro')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('intro')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  23, Col   5  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  23, Col  11  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: VIDEO_SILENCIO  ('@silencio')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: VIDEO_SILENCIO  ('@silencio')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: VIDEO_SILENCIO  ('@silencio')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: VIDEO_SILENCIO  ('@silencio')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: VIDEO_SILENCIO  ('@silencio')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: VIDEO_SILENCIO  ('@silencio')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: VIDEO_SILENCIO  ('@silencio')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: VIDEO_SILENCIO  ('@silencio')
[RULE]     Factor          -> FunctionCall

[EXPAND]   No-terminal: FunctionCall     Lookahead: VIDEO_SILENCIO  ('@silencio')
[RULE]     FunctionCall    -> VIDEO_SILENCIO LBRACKET EmptyArgs RBRACKET

[MATCH]    Línea  23, Col  13  Terminal esperado: VIDEO_SILENCIO   Token actual: VIDEO_SILENCIO  ('@silencio')
[MATCH]    Línea  23, Col  22  Terminal esperado: LBRACKET         Token actual: LBRACKET        ('[')
[EXPAND]   No-terminal: EmptyArgs        Lookahead: RBRACKET        (']')
[RULE]     EmptyArgs       -> ε

[MATCH]    Línea  23, Col  23  Terminal esperado: RBRACKET         Token actual: RBRACKET        (']')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  23, Col  24  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('intro')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('intro')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('intro')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  24, Col   5  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  24, Col  11  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: VIDEO_QUITAR_AUDIO ('@quitar_audio')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: VIDEO_QUITAR_AUDIO ('@quitar_audio')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: VIDEO_QUITAR_AUDIO ('@quitar_audio')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: VIDEO_QUITAR_AUDIO ('@quitar_audio')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: VIDEO_QUITAR_AUDIO ('@quitar_audio')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: VIDEO_QUITAR_AUDIO ('@quitar_audio')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: VIDEO_QUITAR_AUDIO ('@quitar_audio')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: VIDEO_QUITAR_AUDIO ('@quitar_audio')
[RULE]     Factor          -> FunctionCall

[EXPAND]   No-terminal: FunctionCall     Lookahead: VIDEO_QUITAR_AUDIO ('@quitar_audio')
[RULE]     FunctionCall    -> VIDEO_QUITAR_AUDIO LBRACKET EmptyArgs RBRACKET

[MATCH]    Línea  24, Col  13  Terminal esperado: VIDEO_QUITAR_AUDIO  Token actual: VIDEO_QUITAR_AUDIO ('@quitar_audio')
[MATCH]    Línea  24, Col  26  Terminal esperado: LBRACKET         Token actual: LBRACKET        ('[')
[EXPAND]   No-terminal: EmptyArgs        Lookahead: RBRACKET        (']')
[RULE]     EmptyArgs       -> ε

[MATCH]    Línea  24, Col  27  Terminal esperado: RBRACKET         Token actual: RBRACKET        (']')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  24, Col  28  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('intro')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('intro')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('intro')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  25, Col   5  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  25, Col  11  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: VIDEO_AGREGAR_MUSICA ('@agregar_musica')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: VIDEO_AGREGAR_MUSICA ('@agregar_musica')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: VIDEO_AGREGAR_MUSICA ('@agregar_musica')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: VIDEO_AGREGAR_MUSICA ('@agregar_musica')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: VIDEO_AGREGAR_MUSICA ('@agregar_musica')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: VIDEO_AGREGAR_MUSICA ('@agregar_musica')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: VIDEO_AGREGAR_MUSICA ('@agregar_musica')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: VIDEO_AGREGAR_MUSICA ('@agregar_musica')
[RULE]     Factor          -> FunctionCall

[EXPAND]   No-terminal: FunctionCall     Lookahead: VIDEO_AGREGAR_MUSICA ('@agregar_musica')
[RULE]     FunctionCall    -> VIDEO_AGREGAR_MUSICA LBRACKET AgregarMusicaArgs RBRACKET

[MATCH]    Línea  25, Col  13  Terminal esperado: VIDEO_AGREGAR_MUSICA  Token actual: VIDEO_AGREGAR_MUSICA ('@agregar_musica')
[MATCH]    Línea  25, Col  28  Terminal esperado: LBRACKET         Token actual: LBRACKET        ('[')
[EXPAND]   No-terminal: AgregarMusicaArgs  Lookahead: STRING_LITERAL  ('musica.mp3"')
[RULE]     AgregarMusicaArgs -> STRING_LITERAL

[MATCH]    Línea  25, Col  29  Terminal esperado: STRING_LITERAL   Token actual: STRING_LITERAL  ('musica.mp3"')
[MATCH]    Línea  25, Col  41  Terminal esperado: RBRACKET         Token actual: RBRACKET        (']')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  25, Col  42  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('intro')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('intro')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('intro')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  26, Col   5  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  26, Col  11  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: VIDEO_CONCATENAR ('@concatenar')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: VIDEO_CONCATENAR ('@concatenar')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: VIDEO_CONCATENAR ('@concatenar')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: VIDEO_CONCATENAR ('@concatenar')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: VIDEO_CONCATENAR ('@concatenar')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: VIDEO_CONCATENAR ('@concatenar')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: VIDEO_CONCATENAR ('@concatenar')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: VIDEO_CONCATENAR ('@concatenar')
[RULE]     Factor          -> FunctionCall

[EXPAND]   No-terminal: FunctionCall     Lookahead: VIDEO_CONCATENAR ('@concatenar')
[RULE]     FunctionCall    -> VIDEO_CONCATENAR LBRACKET ConcatenarArgs RBRACKET

[MATCH]    Línea  26, Col  13  Terminal esperado: VIDEO_CONCATENAR  Token actual: VIDEO_CONCATENAR ('@concatenar')
[MATCH]    Línea  26, Col  24  Terminal esperado: LBRACKET         Token actual: LBRACKET        ('[')
[EXPAND]   No-terminal: ConcatenarArgs   Lookahead: IDENTIFIER      ('intro')
[RULE]     ConcatenarArgs  -> IDENTIFIER COMMA IDENTIFIER

[MATCH]    Línea  26, Col  25  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  26, Col  30  Terminal esperado: COMMA            Token actual: COMMA           (',')
[MATCH]    Línea  26, Col  32  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  26, Col  37  Terminal esperado: RBRACKET         Token actual: RBRACKET        (']')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  26, Col  38  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('intro')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('intro')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('intro')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  27, Col   5  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  27, Col  11  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: VIDEO_CORTAR    ('@cortar')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: VIDEO_CORTAR    ('@cortar')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: VIDEO_CORTAR    ('@cortar')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: VIDEO_CORTAR    ('@cortar')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: VIDEO_CORTAR    ('@cortar')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: VIDEO_CORTAR    ('@cortar')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: VIDEO_CORTAR    ('@cortar')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: VIDEO_CORTAR    ('@cortar')
[RULE]     Factor          -> FunctionCall

[EXPAND]   No-terminal: FunctionCall     Lookahead: VIDEO_CORTAR    ('@cortar')
[RULE]     FunctionCall    -> VIDEO_CORTAR LBRACKET CortarArgs RBRACKET

[MATCH]    Línea  27, Col  13  Terminal esperado: VIDEO_CORTAR     Token actual: VIDEO_CORTAR    ('@cortar')
[MATCH]    Línea  27, Col  20  Terminal esperado: LBRACKET         Token actual: LBRACKET        ('[')
[EXPAND]   No-terminal: CortarArgs       Lookahead: INT_LITERAL     ('10')
[RULE]     CortarArgs      -> Number COMMA Number

[EXPAND]   No-terminal: Number           Lookahead: INT_LITERAL     ('10')
[RULE]     Number          -> INT_LITERAL

[MATCH]    Línea  27, Col  21  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('10')
[MATCH]    Línea  27, Col  23  Terminal esperado: COMMA            Token actual: COMMA           (',')
[EXPAND]   No-terminal: Number           Lookahead: INT_LITERAL     ('20')
[RULE]     Number          -> INT_LITERAL

[MATCH]    Línea  27, Col  25  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('20')
[MATCH]    Línea  27, Col  27  Terminal esperado: RBRACKET         Token actual: RBRACKET        (']')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  27, Col  28  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: INT_TYPE        ('int')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: INT_TYPE        ('int')
[RULE]     Stmt            -> VarDecl SEMICOLON

[EXPAND]   No-terminal: VarDecl          Lookahead: INT_TYPE        ('int')
[RULE]     VarDecl         -> Type COLON IDENTIFIER VarInitOpt

[EXPAND]   No-terminal: Type             Lookahead: INT_TYPE        ('int')
[RULE]     Type            -> INT_TYPE

[MATCH]    Línea  29, Col   5  Terminal esperado: INT_TYPE         Token actual: INT_TYPE        ('int')
[MATCH]    Línea  29, Col   8  Terminal esperado: COLON            Token actual: COLON           (':')
[MATCH]    Línea  29, Col  10  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('es_horizontal')
[EXPAND]   No-terminal: VarInitOpt       Lookahead: ASSIGN          ('=')
[RULE]     VarInitOpt      -> ASSIGN Expr

[MATCH]    Línea  29, Col  24  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: INT_LITERAL     ('1')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: INT_LITERAL     ('1')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: INT_LITERAL     ('1')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: INT_LITERAL     ('1')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: INT_LITERAL     ('1')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: INT_LITERAL     ('1')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('1')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('1')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  29, Col  26  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('1')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  29, Col  27  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: IF              ('if')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IF              ('if')
[RULE]     Stmt            -> IfStmt

[EXPAND]   No-terminal: IfStmt           Lookahead: IF              ('if')
[RULE]     IfStmt          -> IF LPAREN Expr RPAREN Block ElseOpt

[MATCH]    Línea  32, Col   5  Terminal esperado: IF               Token actual: IF              ('if')
[MATCH]    Línea  32, Col   8  Terminal esperado: LPAREN           Token actual: LPAREN          ('(')
[EXPAND]   No-terminal: Expr             Lookahead: IDENTIFIER      ('es_horizontal')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: IDENTIFIER      ('es_horizontal')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: IDENTIFIER      ('es_horizontal')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: IDENTIFIER      ('es_horizontal')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: IDENTIFIER      ('es_horizontal')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: IDENTIFIER      ('es_horizontal')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: IDENTIFIER      ('es_horizontal')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: IDENTIFIER      ('es_horizontal')
[RULE]     Factor          -> IDENTIFIER

[MATCH]    Línea  32, Col   9  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('es_horizontal')
[EXPAND]   No-terminal: Term'            Lookahead: RPAREN          (')')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: RPAREN          (')')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: RPAREN          (')')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: RPAREN          (')')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: RPAREN          (')')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: RPAREN          (')')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  32, Col  22  Terminal esperado: RPAREN           Token actual: RPAREN          (')')
[EXPAND]   No-terminal: Block            Lookahead: LBRACE          ('{')
[RULE]     Block           -> LBRACE StmtList RBRACE

[MATCH]    Línea  32, Col  24  Terminal esperado: LBRACE           Token actual: LBRACE          ('{')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('intro')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('intro')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('intro')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  33, Col   9  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  33, Col  15  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     Factor          -> FunctionCall

[EXPAND]   No-terminal: FunctionCall     Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     FunctionCall    -> VIDEO_FLIP LBRACKET FlipArgs RBRACKET

[MATCH]    Línea  33, Col  17  Terminal esperado: VIDEO_FLIP       Token actual: VIDEO_FLIP      ('@flip')
[MATCH]    Línea  33, Col  22  Terminal esperado: LBRACKET         Token actual: LBRACKET        ('[')
[EXPAND]   No-terminal: FlipArgs         Lookahead: STRING_LITERAL  ('vertical"')
[RULE]     FlipArgs        -> STRING_LITERAL

[MATCH]    Línea  33, Col  23  Terminal esperado: STRING_LITERAL   Token actual: STRING_LITERAL  ('vertical"')
[MATCH]    Línea  33, Col  33  Terminal esperado: RBRACKET         Token actual: RBRACKET        (']')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  33, Col  34  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: RBRACE          ('}')
[RULE]     StmtList        -> ε

[MATCH]    Línea  34, Col   5  Terminal esperado: RBRACE           Token actual: RBRACE          ('}')
[EXPAND]   No-terminal: ElseOpt          Lookahead: ELSE            ('else')
[RULE]     ElseOpt         -> ELSE Block

[MATCH]    Línea  34, Col   7  Terminal esperado: ELSE             Token actual: ELSE            ('else')
[EXPAND]   No-terminal: Block            Lookahead: LBRACE          ('{')
[RULE]     Block           -> LBRACE StmtList RBRACE

[MATCH]    Línea  34, Col  12  Terminal esperado: LBRACE           Token actual: LBRACE          ('{')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('intro')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('intro')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('intro')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  35, Col   9  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  35, Col  15  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     Factor          -> FunctionCall

[EXPAND]   No-terminal: FunctionCall     Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     FunctionCall    -> VIDEO_FLIP LBRACKET FlipArgs RBRACKET

[MATCH]    Línea  35, Col  17  Terminal esperado: VIDEO_FLIP       Token actual: VIDEO_FLIP      ('@flip')
[MATCH]    Línea  35, Col  22  Terminal esperado: LBRACKET         Token actual: LBRACKET        ('[')
[EXPAND]   No-terminal: FlipArgs         Lookahead: STRING_LITERAL  ('horizontal"')
[RULE]     FlipArgs        -> STRING_LITERAL

[MATCH]    Línea  35, Col  23  Terminal esperado: STRING_LITERAL   Token actual: STRING_LITERAL  ('horizontal"')
[MATCH]    Línea  35, Col  35  Terminal esperado: RBRACKET         Token actual: RBRACKET        (']')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  35, Col  36  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: RBRACE          ('}')
[RULE]     StmtList        -> ε

[MATCH]    Línea  36, Col   5  Terminal esperado: RBRACE           Token actual: RBRACE          ('}')
[EXPAND]   No-terminal: StmtList         Lookahead: INT_TYPE        ('int')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: INT_TYPE        ('int')
[RULE]     Stmt            -> VarDecl SEMICOLON

[EXPAND]   No-terminal: VarDecl          Lookahead: INT_TYPE        ('int')
[RULE]     VarDecl         -> Type COLON IDENTIFIER VarInitOpt

[EXPAND]   No-terminal: Type             Lookahead: INT_TYPE        ('int')
[RULE]     Type            -> INT_TYPE

[MATCH]    Línea  38, Col   5  Terminal esperado: INT_TYPE         Token actual: INT_TYPE        ('int')
[MATCH]    Línea  38, Col   8  Terminal esperado: COLON            Token actual: COLON           (':')
[MATCH]    Línea  38, Col  10  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('i')
[EXPAND]   No-terminal: VarInitOpt       Lookahead: ASSIGN          ('=')
[RULE]     VarInitOpt      -> ASSIGN Expr

[MATCH]    Línea  38, Col  12  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: INT_LITERAL     ('0')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: INT_LITERAL     ('0')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: INT_LITERAL     ('0')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('0')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('0')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  38, Col  14  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('0')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  38, Col  15  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: IF              ('if')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IF              ('if')
[RULE]     Stmt            -> IfStmt

[EXPAND]   No-terminal: IfStmt           Lookahead: IF              ('if')
[RULE]     IfStmt          -> IF LPAREN Expr RPAREN Block ElseOpt

[MATCH]    Línea  46, Col   5  Terminal esperado: IF               Token actual: IF              ('if')
[MATCH]    Línea  46, Col   8  Terminal esperado: LPAREN           Token actual: LPAREN          ('(')
[EXPAND]   No-terminal: Expr             Lookahead: IDENTIFIER      ('es_horizontal')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: IDENTIFIER      ('es_horizontal')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: IDENTIFIER      ('es_horizontal')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: IDENTIFIER      ('es_horizontal')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: IDENTIFIER      ('es_horizontal')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: IDENTIFIER      ('es_horizontal')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: IDENTIFIER      ('es_horizontal')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: IDENTIFIER      ('es_horizontal')
[RULE]     Factor          -> IDENTIFIER

[MATCH]    Línea  46, Col   9  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('es_horizontal')
[EXPAND]   No-terminal: Term'            Lookahead: EQ              ('==')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: EQ              ('==')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: EQ              ('==')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: EQ              ('==')
[RULE]     EqualityExpr'   -> EQ RelExpr EqualityExpr'

[MATCH]    Línea  46, Col  23  Terminal esperado: EQ               Token actual: EQ              ('==')
[EXPAND]   No-terminal: RelExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('0')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('0')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  46, Col  26  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('0')
[EXPAND]   No-terminal: Term'            Lookahead: RPAREN          (')')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: RPAREN          (')')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: RPAREN          (')')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: RPAREN          (')')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: RPAREN          (')')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: RPAREN          (')')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  46, Col  27  Terminal esperado: RPAREN           Token actual: RPAREN          (')')
[EXPAND]   No-terminal: Block            Lookahead: LBRACE          ('{')
[RULE]     Block           -> LBRACE StmtList RBRACE

[MATCH]    Línea  46, Col  29  Terminal esperado: LBRACE           Token actual: LBRACE          ('{')
[EXPAND]   No-terminal: StmtList         Lookahead: INT_TYPE        ('int')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: INT_TYPE        ('int')
[RULE]     Stmt            -> VarDecl SEMICOLON

[EXPAND]   No-terminal: VarDecl          Lookahead: INT_TYPE        ('int')
[RULE]     VarDecl         -> Type COLON IDENTIFIER VarInitOpt

[EXPAND]   No-terminal: Type             Lookahead: INT_TYPE        ('int')
[RULE]     Type            -> INT_TYPE

[MATCH]    Línea  47, Col   9  Terminal esperado: INT_TYPE         Token actual: INT_TYPE        ('int')
[MATCH]    Línea  47, Col  12  Terminal esperado: COLON            Token actual: COLON           (':')
[MATCH]    Línea  47, Col  14  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('i')
[EXPAND]   No-terminal: VarInitOpt       Lookahead: ASSIGN          ('=')
[RULE]     VarInitOpt      -> ASSIGN Expr

[MATCH]    Línea  47, Col  16  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: INT_LITERAL     ('0')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: INT_LITERAL     ('0')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: INT_LITERAL     ('0')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('0')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('0')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  47, Col  18  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('0')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  47, Col  19  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: WHILE           ('while')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: WHILE           ('while')
[RULE]     Stmt            -> WhileStmt

[EXPAND]   No-terminal: WhileStmt        Lookahead: WHILE           ('while')
[RULE]     WhileStmt       -> WHILE LPAREN Expr RPAREN Block

[MATCH]    Línea  48, Col   9  Terminal esperado: WHILE            Token actual: WHILE           ('while')
[MATCH]    Línea  48, Col  15  Terminal esperado: LPAREN           Token actual: LPAREN          ('(')
[EXPAND]   No-terminal: Expr             Lookahead: IDENTIFIER      ('i')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: IDENTIFIER      ('i')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: IDENTIFIER      ('i')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: IDENTIFIER      ('i')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: IDENTIFIER      ('i')
[RULE]     Factor          -> IDENTIFIER

[MATCH]    Línea  48, Col  16  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('i')
[EXPAND]   No-terminal: Term'            Lookahead: LT              ('<')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: LT              ('<')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: LT              ('<')
[RULE]     RelExpr'        -> LT AddExpr RelExpr'

[MATCH]    Línea  48, Col  18  Terminal esperado: LT               Token actual: LT              ('<')
[EXPAND]   No-terminal: AddExpr          Lookahead: INT_LITERAL     ('3')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('3')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('3')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  48, Col  20  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('3')
[EXPAND]   No-terminal: Term'            Lookahead: RPAREN          (')')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: RPAREN          (')')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: RPAREN          (')')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: RPAREN          (')')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: RPAREN          (')')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: RPAREN          (')')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  48, Col  21  Terminal esperado: RPAREN           Token actual: RPAREN          (')')
[EXPAND]   No-terminal: Block            Lookahead: LBRACE          ('{')
[RULE]     Block           -> LBRACE StmtList RBRACE

[MATCH]    Línea  48, Col  23  Terminal esperado: LBRACE           Token actual: LBRACE          ('{')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('intro')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('intro')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('intro')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  49, Col  13  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  49, Col  19  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     Factor          -> FunctionCall

[EXPAND]   No-terminal: FunctionCall     Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     FunctionCall    -> VIDEO_FLIP LBRACKET FlipArgs RBRACKET

[MATCH]    Línea  49, Col  21  Terminal esperado: VIDEO_FLIP       Token actual: VIDEO_FLIP      ('@flip')
[MATCH]    Línea  49, Col  26  Terminal esperado: LBRACKET         Token actual: LBRACKET        ('[')
[EXPAND]   No-terminal: FlipArgs         Lookahead: STRING_LITERAL  ('vertical"')
[RULE]     FlipArgs        -> STRING_LITERAL

[MATCH]    Línea  49, Col  27  Terminal esperado: STRING_LITERAL   Token actual: STRING_LITERAL  ('vertical"')
[MATCH]    Línea  49, Col  37  Terminal esperado: RBRACKET         Token actual: RBRACKET        (']')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  49, Col  38  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('i')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('i')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('i')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  50, Col  13  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('i')
[MATCH]    Línea  50, Col  15  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: IDENTIFIER      ('i')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: IDENTIFIER      ('i')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: IDENTIFIER      ('i')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: IDENTIFIER      ('i')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: IDENTIFIER      ('i')
[RULE]     Factor          -> IDENTIFIER

[MATCH]    Línea  50, Col  17  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('i')
[EXPAND]   No-terminal: Term'            Lookahead: PLUS            ('+')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: PLUS            ('+')
[RULE]     AddExpr'        -> PLUS Term AddExpr'

[MATCH]    Línea  50, Col  19  Terminal esperado: PLUS             Token actual: PLUS            ('+')
[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('1')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('1')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  50, Col  21  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('1')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  50, Col  22  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: RBRACE          ('}')
[RULE]     StmtList        -> ε

[MATCH]    Línea  51, Col   9  Terminal esperado: RBRACE           Token actual: RBRACE          ('}')
[EXPAND]   No-terminal: StmtList         Lookahead: RBRACE          ('}')
[RULE]     StmtList        -> ε

[MATCH]    Línea  52, Col   5  Terminal esperado: RBRACE           Token actual: RBRACE          ('}')
[EXPAND]   No-terminal: ElseOpt          Lookahead: ELSE            ('else')
[RULE]     ElseOpt         -> ELSE Block

[MATCH]    Línea  52, Col   7  Terminal esperado: ELSE             Token actual: ELSE            ('else')
[EXPAND]   No-terminal: Block            Lookahead: LBRACE          ('{')
[RULE]     Block           -> LBRACE StmtList RBRACE

[MATCH]    Línea  52, Col  12  Terminal esperado: LBRACE           Token actual: LBRACE          ('{')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('intro')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('intro')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('intro')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  53, Col   9  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  53, Col  15  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     Factor          -> FunctionCall

[EXPAND]   No-terminal: FunctionCall     Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     FunctionCall    -> VIDEO_FLIP LBRACKET FlipArgs RBRACKET

[MATCH]    Línea  53, Col  17  Terminal esperado: VIDEO_FLIP       Token actual: VIDEO_FLIP      ('@flip')
[MATCH]    Línea  53, Col  22  Terminal esperado: LBRACKET         Token actual: LBRACKET        ('[')
[EXPAND]   No-terminal: FlipArgs         Lookahead: STRING_LITERAL  ('horizontal"')
[RULE]     FlipArgs        -> STRING_LITERAL

[MATCH]    Línea  53, Col  23  Terminal esperado: STRING_LITERAL   Token actual: STRING_LITERAL  ('horizontal"')
[MATCH]    Línea  53, Col  35  Terminal esperado: RBRACKET         Token actual: RBRACKET        (']')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  53, Col  36  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: RBRACE          ('}')
[RULE]     StmtList        -> ε

[MATCH]    Línea  54, Col   5  Terminal esperado: RBRACE           Token actual: RBRACE          ('}')
[EXPAND]   No-terminal: StmtList         Lookahead: INT_TYPE        ('int')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: INT_TYPE        ('int')
[RULE]     Stmt            -> VarDecl SEMICOLON

[EXPAND]   No-terminal: VarDecl          Lookahead: INT_TYPE        ('int')
[RULE]     VarDecl         -> Type COLON IDENTIFIER VarInitOpt

[EXPAND]   No-terminal: Type             Lookahead: INT_TYPE        ('int')
[RULE]     Type            -> INT_TYPE

[MATCH]    Línea  56, Col   5  Terminal esperado: INT_TYPE         Token actual: INT_TYPE        ('int')
[MATCH]    Línea  56, Col   8  Terminal esperado: COLON            Token actual: COLON           (':')
[MATCH]    Línea  56, Col  10  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('i')
[EXPAND]   No-terminal: VarInitOpt       Lookahead: ASSIGN          ('=')
[RULE]     VarInitOpt      -> ASSIGN Expr

[MATCH]    Línea  56, Col  12  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: INT_LITERAL     ('0')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: INT_LITERAL     ('0')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: INT_LITERAL     ('0')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('0')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('0')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  56, Col  14  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('0')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  56, Col  15  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: WHILE           ('while')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: WHILE           ('while')
[RULE]     Stmt            -> WhileStmt

[EXPAND]   No-terminal: WhileStmt        Lookahead: WHILE           ('while')
[RULE]     WhileStmt       -> WHILE LPAREN Expr RPAREN Block

[MATCH]    Línea  57, Col   5  Terminal esperado: WHILE            Token actual: WHILE           ('while')
[MATCH]    Línea  57, Col  11  Terminal esperado: LPAREN           Token actual: LPAREN          ('(')
[EXPAND]   No-terminal: Expr             Lookahead: IDENTIFIER      ('i')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: IDENTIFIER      ('i')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: IDENTIFIER      ('i')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: IDENTIFIER      ('i')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: IDENTIFIER      ('i')
[RULE]     Factor          -> IDENTIFIER

[MATCH]    Línea  57, Col  12  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('i')
[EXPAND]   No-terminal: Term'            Lookahead: LT              ('<')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: LT              ('<')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: LT              ('<')
[RULE]     RelExpr'        -> LT AddExpr RelExpr'

[MATCH]    Línea  57, Col  14  Terminal esperado: LT               Token actual: LT              ('<')
[EXPAND]   No-terminal: AddExpr          Lookahead: INT_LITERAL     ('3')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('3')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('3')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  57, Col  16  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('3')
[EXPAND]   No-terminal: Term'            Lookahead: RPAREN          (')')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: RPAREN          (')')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: RPAREN          (')')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: RPAREN          (')')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: RPAREN          (')')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: RPAREN          (')')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  57, Col  17  Terminal esperado: RPAREN           Token actual: RPAREN          (')')
[EXPAND]   No-terminal: Block            Lookahead: LBRACE          ('{')
[RULE]     Block           -> LBRACE StmtList RBRACE

[MATCH]    Línea  57, Col  19  Terminal esperado: LBRACE           Token actual: LBRACE          ('{')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('intro')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('intro')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('intro')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  58, Col   9  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  58, Col  15  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     Factor          -> FunctionCall

[EXPAND]   No-terminal: FunctionCall     Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     FunctionCall    -> VIDEO_VELOCIDAD LBRACKET VelocidadArgs RBRACKET

[MATCH]    Línea  58, Col  17  Terminal esperado: VIDEO_VELOCIDAD  Token actual: VIDEO_VELOCIDAD ('@velocidad')
[MATCH]    Línea  58, Col  27  Terminal esperado: LBRACKET         Token actual: LBRACKET        ('[')
[EXPAND]   No-terminal: VelocidadArgs    Lookahead: INT_LITERAL     ('10')
[RULE]     VelocidadArgs   -> Number

[EXPAND]   No-terminal: Number           Lookahead: INT_LITERAL     ('10')
[RULE]     Number          -> INT_LITERAL

[MATCH]    Línea  58, Col  28  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('10')
[MATCH]    Línea  58, Col  30  Terminal esperado: RBRACKET         Token actual: RBRACKET        (']')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  58, Col  31  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: INT_TYPE        ('int')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: INT_TYPE        ('int')
[RULE]     Stmt            -> VarDecl SEMICOLON

[EXPAND]   No-terminal: VarDecl          Lookahead: INT_TYPE        ('int')
[RULE]     VarDecl         -> Type COLON IDENTIFIER VarInitOpt

[EXPAND]   No-terminal: Type             Lookahead: INT_TYPE        ('int')
[RULE]     Type            -> INT_TYPE

[MATCH]    Línea  59, Col   9  Terminal esperado: INT_TYPE         Token actual: INT_TYPE        ('int')
[MATCH]    Línea  59, Col  12  Terminal esperado: COLON            Token actual: COLON           (':')
[MATCH]    Línea  59, Col  14  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('j')
[EXPAND]   No-terminal: VarInitOpt       Lookahead: ASSIGN          ('=')
[RULE]     VarInitOpt      -> ASSIGN Expr

[MATCH]    Línea  59, Col  16  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: INT_LITERAL     ('0')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: INT_LITERAL     ('0')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: INT_LITERAL     ('0')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('0')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('0')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  59, Col  18  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('0')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  59, Col  19  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: WHILE           ('while')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: WHILE           ('while')
[RULE]     Stmt            -> WhileStmt

[EXPAND]   No-terminal: WhileStmt        Lookahead: WHILE           ('while')
[RULE]     WhileStmt       -> WHILE LPAREN Expr RPAREN Block

[MATCH]    Línea  60, Col   9  Terminal esperado: WHILE            Token actual: WHILE           ('while')
[MATCH]    Línea  60, Col  15  Terminal esperado: LPAREN           Token actual: LPAREN          ('(')
[EXPAND]   No-terminal: Expr             Lookahead: IDENTIFIER      ('j')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: IDENTIFIER      ('j')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: IDENTIFIER      ('j')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: IDENTIFIER      ('j')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: IDENTIFIER      ('j')
[RULE]     Factor          -> IDENTIFIER

[MATCH]    Línea  60, Col  16  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('j')
[EXPAND]   No-terminal: Term'            Lookahead: LT              ('<')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: LT              ('<')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: LT              ('<')
[RULE]     RelExpr'        -> LT AddExpr RelExpr'

[MATCH]    Línea  60, Col  18  Terminal esperado: LT               Token actual: LT              ('<')
[EXPAND]   No-terminal: AddExpr          Lookahead: INT_LITERAL     ('3')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('3')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('3')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  60, Col  20  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('3')
[EXPAND]   No-terminal: Term'            Lookahead: RPAREN          (')')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: RPAREN          (')')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: RPAREN          (')')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: RPAREN          (')')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: RPAREN          (')')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: RPAREN          (')')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  60, Col  21  Terminal esperado: RPAREN           Token actual: RPAREN          (')')
[EXPAND]   No-terminal: Block            Lookahead: LBRACE          ('{')
[RULE]     Block           -> LBRACE StmtList RBRACE

[MATCH]    Línea  60, Col  23  Terminal esperado: LBRACE           Token actual: LBRACE          ('{')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('intro')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('intro')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('intro')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  61, Col  13  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  61, Col  19  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     Factor          -> FunctionCall

[EXPAND]   No-terminal: FunctionCall     Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     FunctionCall    -> VIDEO_VELOCIDAD LBRACKET VelocidadArgs RBRACKET

[MATCH]    Línea  61, Col  21  Terminal esperado: VIDEO_VELOCIDAD  Token actual: VIDEO_VELOCIDAD ('@velocidad')
[MATCH]    Línea  61, Col  31  Terminal esperado: LBRACKET         Token actual: LBRACKET        ('[')
[EXPAND]   No-terminal: VelocidadArgs    Lookahead: INT_LITERAL     ('10')
[RULE]     VelocidadArgs   -> Number

[EXPAND]   No-terminal: Number           Lookahead: INT_LITERAL     ('10')
[RULE]     Number          -> INT_LITERAL

[MATCH]    Línea  61, Col  32  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('10')
[MATCH]    Línea  61, Col  34  Terminal esperado: RBRACKET         Token actual: RBRACKET        (']')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  61, Col  35  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('j')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('j')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('j')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  62, Col  13  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('j')
[MATCH]    Línea  62, Col  15  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: IDENTIFIER      ('j')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: IDENTIFIER      ('j')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: IDENTIFIER      ('j')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: IDENTIFIER      ('j')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: IDENTIFIER      ('j')
[RULE]     Factor          -> IDENTIFIER

[MATCH]    Línea  62, Col  17  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('j')
[EXPAND]   No-terminal: Term'            Lookahead: PLUS            ('+')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: PLUS            ('+')
[RULE]     AddExpr'        -> PLUS Term AddExpr'

[MATCH]    Línea  62, Col  19  Terminal esperado: PLUS             Token actual: PLUS            ('+')
[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('1')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('1')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  62, Col  21  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('1')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  62, Col  22  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: RBRACE          ('}')
[RULE]     StmtList        -> ε

[MATCH]    Línea  63, Col   9  Terminal esperado: RBRACE           Token actual: RBRACE          ('}')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('i')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('i')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('i')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  64, Col   9  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('i')
[MATCH]    Línea  64, Col  11  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: IDENTIFIER      ('i')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: IDENTIFIER      ('i')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: IDENTIFIER      ('i')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: IDENTIFIER      ('i')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: IDENTIFIER      ('i')
[RULE]     Factor          -> IDENTIFIER

[MATCH]    Línea  64, Col  13  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('i')
[EXPAND]   No-terminal: Term'            Lookahead: PLUS            ('+')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: PLUS            ('+')
[RULE]     AddExpr'        -> PLUS Term AddExpr'

[MATCH]    Línea  64, Col  15  Terminal esperado: PLUS             Token actual: PLUS            ('+')
[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('1')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('1')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  64, Col  17  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('1')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  64, Col  18  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: RBRACE          ('}')
[RULE]     StmtList        -> ε

[MATCH]    Línea  65, Col   5  Terminal esperado: RBRACE           Token actual: RBRACE          ('}')
[EXPAND]   No-terminal: StmtList         Lookahead: INT_TYPE        ('int')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: INT_TYPE        ('int')
[RULE]     Stmt            -> VarDecl SEMICOLON

[EXPAND]   No-terminal: VarDecl          Lookahead: INT_TYPE        ('int')
[RULE]     VarDecl         -> Type COLON IDENTIFIER VarInitOpt

[EXPAND]   No-terminal: Type             Lookahead: INT_TYPE        ('int')
[RULE]     Type            -> INT_TYPE

[MATCH]    Línea  67, Col   5  Terminal esperado: INT_TYPE         Token actual: INT_TYPE        ('int')
[MATCH]    Línea  67, Col   8  Terminal esperado: COLON            Token actual: COLON           (':')
[MATCH]    Línea  67, Col  10  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('i')
[EXPAND]   No-terminal: VarInitOpt       Lookahead: ASSIGN          ('=')
[RULE]     VarInitOpt      -> ASSIGN Expr

[MATCH]    Línea  67, Col  12  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: INT_LITERAL     ('0')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: INT_LITERAL     ('0')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: INT_LITERAL     ('0')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('0')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('0')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  67, Col  14  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('0')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  67, Col  15  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: WHILE           ('while')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: WHILE           ('while')
[RULE]     Stmt            -> WhileStmt

[EXPAND]   No-terminal: WhileStmt        Lookahead: WHILE           ('while')
[RULE]     WhileStmt       -> WHILE LPAREN Expr RPAREN Block

[MATCH]    Línea  68, Col   5  Terminal esperado: WHILE            Token actual: WHILE           ('while')
[MATCH]    Línea  68, Col  11  Terminal esperado: LPAREN           Token actual: LPAREN          ('(')
[EXPAND]   No-terminal: Expr             Lookahead: IDENTIFIER      ('i')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: IDENTIFIER      ('i')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: IDENTIFIER      ('i')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: IDENTIFIER      ('i')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: IDENTIFIER      ('i')
[RULE]     Factor          -> IDENTIFIER

[MATCH]    Línea  68, Col  12  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('i')
[EXPAND]   No-terminal: Term'            Lookahead: LT              ('<')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: LT              ('<')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: LT              ('<')
[RULE]     RelExpr'        -> LT AddExpr RelExpr'

[MATCH]    Línea  68, Col  14  Terminal esperado: LT               Token actual: LT              ('<')
[EXPAND]   No-terminal: AddExpr          Lookahead: INT_LITERAL     ('3')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('3')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('3')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  68, Col  16  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('3')
[EXPAND]   No-terminal: Term'            Lookahead: RPAREN          (')')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: RPAREN          (')')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: RPAREN          (')')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: RPAREN          (')')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: RPAREN          (')')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: RPAREN          (')')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  68, Col  17  Terminal esperado: RPAREN           Token actual: RPAREN          (')')
[EXPAND]   No-terminal: Block            Lookahead: LBRACE          ('{')
[RULE]     Block           -> LBRACE StmtList RBRACE

[MATCH]    Línea  68, Col  19  Terminal esperado: LBRACE           Token actual: LBRACE          ('{')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('intro')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('intro')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('intro')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  69, Col   9  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  69, Col  15  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     Factor          -> FunctionCall

[EXPAND]   No-terminal: FunctionCall     Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     FunctionCall    -> VIDEO_VELOCIDAD LBRACKET VelocidadArgs RBRACKET

[MATCH]    Línea  69, Col  17  Terminal esperado: VIDEO_VELOCIDAD  Token actual: VIDEO_VELOCIDAD ('@velocidad')
[MATCH]    Línea  69, Col  27  Terminal esperado: LBRACKET         Token actual: LBRACKET        ('[')
[EXPAND]   No-terminal: VelocidadArgs    Lookahead: INT_LITERAL     ('10')
[RULE]     VelocidadArgs   -> Number

[EXPAND]   No-terminal: Number           Lookahead: INT_LITERAL     ('10')
[RULE]     Number          -> INT_LITERAL

[MATCH]    Línea  69, Col  28  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('10')
[MATCH]    Línea  69, Col  30  Terminal esperado: RBRACKET         Token actual: RBRACKET        (']')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  69, Col  31  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: INT_TYPE        ('int')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: INT_TYPE        ('int')
[RULE]     Stmt            -> VarDecl SEMICOLON

[EXPAND]   No-terminal: VarDecl          Lookahead: INT_TYPE        ('int')
[RULE]     VarDecl         -> Type COLON IDENTIFIER VarInitOpt

[EXPAND]   No-terminal: Type             Lookahead: INT_TYPE        ('int')
[RULE]     Type            -> INT_TYPE

[MATCH]    Línea  71, Col   9  Terminal esperado: INT_TYPE         Token actual: INT_TYPE        ('int')
[MATCH]    Línea  71, Col  12  Terminal esperado: COLON            Token actual: COLON           (':')
[MATCH]    Línea  71, Col  14  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('j')
[EXPAND]   No-terminal: VarInitOpt       Lookahead: ASSIGN          ('=')
[RULE]     VarInitOpt      -> ASSIGN Expr

[MATCH]    Línea  71, Col  16  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: INT_LITERAL     ('0')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: INT_LITERAL     ('0')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: INT_LITERAL     ('0')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('0')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('0')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  71, Col  18  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('0')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  71, Col  19  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: IF              ('if')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IF              ('if')
[RULE]     Stmt            -> IfStmt

[EXPAND]   No-terminal: IfStmt           Lookahead: IF              ('if')
[RULE]     IfStmt          -> IF LPAREN Expr RPAREN Block ElseOpt

[MATCH]    Línea  72, Col   9  Terminal esperado: IF               Token actual: IF              ('if')
[MATCH]    Línea  72, Col  12  Terminal esperado: LPAREN           Token actual: LPAREN          ('(')
[EXPAND]   No-terminal: Expr             Lookahead: IDENTIFIER      ('i')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: IDENTIFIER      ('i')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: IDENTIFIER      ('i')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: IDENTIFIER      ('i')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: IDENTIFIER      ('i')
[RULE]     Factor          -> IDENTIFIER

[MATCH]    Línea  72, Col  13  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('i')
[EXPAND]   No-terminal: Term'            Lookahead: EQ              ('==')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: EQ              ('==')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: EQ              ('==')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: EQ              ('==')
[RULE]     EqualityExpr'   -> EQ RelExpr EqualityExpr'

[MATCH]    Línea  72, Col  15  Terminal esperado: EQ               Token actual: EQ              ('==')
[EXPAND]   No-terminal: RelExpr          Lookahead: INT_LITERAL     ('5')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: INT_LITERAL     ('5')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('5')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('5')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  72, Col  18  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('5')
[EXPAND]   No-terminal: Term'            Lookahead: RPAREN          (')')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: RPAREN          (')')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: RPAREN          (')')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: RPAREN          (')')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: RPAREN          (')')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: RPAREN          (')')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  72, Col  19  Terminal esperado: RPAREN           Token actual: RPAREN          (')')
[EXPAND]   No-terminal: Block            Lookahead: LBRACE          ('{')
[RULE]     Block           -> LBRACE StmtList RBRACE

[MATCH]    Línea  72, Col  20  Terminal esperado: LBRACE           Token actual: LBRACE          ('{')
[EXPAND]   No-terminal: StmtList         Lookahead: WHILE           ('while')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: WHILE           ('while')
[RULE]     Stmt            -> WhileStmt

[EXPAND]   No-terminal: WhileStmt        Lookahead: WHILE           ('while')
[RULE]     WhileStmt       -> WHILE LPAREN Expr RPAREN Block

[MATCH]    Línea  73, Col  13  Terminal esperado: WHILE            Token actual: WHILE           ('while')
[MATCH]    Línea  73, Col  19  Terminal esperado: LPAREN           Token actual: LPAREN          ('(')
[EXPAND]   No-terminal: Expr             Lookahead: IDENTIFIER      ('j')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: IDENTIFIER      ('j')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: IDENTIFIER      ('j')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: IDENTIFIER      ('j')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: IDENTIFIER      ('j')
[RULE]     Factor          -> IDENTIFIER

[MATCH]    Línea  73, Col  20  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('j')
[EXPAND]   No-terminal: Term'            Lookahead: LT              ('<')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: LT              ('<')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: LT              ('<')
[RULE]     RelExpr'        -> LT AddExpr RelExpr'

[MATCH]    Línea  73, Col  22  Terminal esperado: LT               Token actual: LT              ('<')
[EXPAND]   No-terminal: AddExpr          Lookahead: INT_LITERAL     ('30')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('30')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('30')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  73, Col  24  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('30')
[EXPAND]   No-terminal: Term'            Lookahead: RPAREN          (')')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: RPAREN          (')')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: RPAREN          (')')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: RPAREN          (')')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: RPAREN          (')')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: RPAREN          (')')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  73, Col  26  Terminal esperado: RPAREN           Token actual: RPAREN          (')')
[EXPAND]   No-terminal: Block            Lookahead: LBRACE          ('{')
[RULE]     Block           -> LBRACE StmtList RBRACE

[MATCH]    Línea  73, Col  28  Terminal esperado: LBRACE           Token actual: LBRACE          ('{')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('j')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('j')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('j')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  74, Col  17  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('j')
[MATCH]    Línea  74, Col  19  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: IDENTIFIER      ('j')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: IDENTIFIER      ('j')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: IDENTIFIER      ('j')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: IDENTIFIER      ('j')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: IDENTIFIER      ('j')
[RULE]     Factor          -> IDENTIFIER

[MATCH]    Línea  74, Col  21  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('j')
[EXPAND]   No-terminal: Term'            Lookahead: PLUS            ('+')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: PLUS            ('+')
[RULE]     AddExpr'        -> PLUS Term AddExpr'

[MATCH]    Línea  74, Col  23  Terminal esperado: PLUS             Token actual: PLUS            ('+')
[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('1')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('1')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  74, Col  25  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('1')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  74, Col  26  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: RBRACE          ('}')
[RULE]     StmtList        -> ε

[MATCH]    Línea  75, Col  13  Terminal esperado: RBRACE           Token actual: RBRACE          ('}')
[EXPAND]   No-terminal: StmtList         Lookahead: RBRACE          ('}')
[RULE]     StmtList        -> ε

[MATCH]    Línea  76, Col   9  Terminal esperado: RBRACE           Token actual: RBRACE          ('}')
[EXPAND]   No-terminal: ElseOpt          Lookahead: ELSE            ('else')
[RULE]     ElseOpt         -> ELSE Block

[MATCH]    Línea  76, Col  11  Terminal esperado: ELSE             Token actual: ELSE            ('else')
[EXPAND]   No-terminal: Block            Lookahead: LBRACE          ('{')
[RULE]     Block           -> LBRACE StmtList RBRACE

[MATCH]    Línea  76, Col  16  Terminal esperado: LBRACE           Token actual: LBRACE          ('{')
[EXPAND]   No-terminal: StmtList         Lookahead: INT_TYPE        ('int')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: INT_TYPE        ('int')
[RULE]     Stmt            -> VarDecl SEMICOLON

[EXPAND]   No-terminal: VarDecl          Lookahead: INT_TYPE        ('int')
[RULE]     VarDecl         -> Type COLON IDENTIFIER VarInitOpt

[EXPAND]   No-terminal: Type             Lookahead: INT_TYPE        ('int')
[RULE]     Type            -> INT_TYPE

[MATCH]    Línea  77, Col  13  Terminal esperado: INT_TYPE         Token actual: INT_TYPE        ('int')
[MATCH]    Línea  77, Col  16  Terminal esperado: COLON            Token actual: COLON           (':')
[MATCH]    Línea  77, Col  18  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('j')
[EXPAND]   No-terminal: VarInitOpt       Lookahead: ASSIGN          ('=')
[RULE]     VarInitOpt      -> ASSIGN Expr

[MATCH]    Línea  77, Col  20  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: INT_LITERAL     ('15')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: INT_LITERAL     ('15')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: INT_LITERAL     ('15')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: INT_LITERAL     ('15')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: INT_LITERAL     ('15')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: INT_LITERAL     ('15')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('15')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('15')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  77, Col  22  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('15')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  77, Col  24  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: WHILE           ('while')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: WHILE           ('while')
[RULE]     Stmt            -> WhileStmt

[EXPAND]   No-terminal: WhileStmt        Lookahead: WHILE           ('while')
[RULE]     WhileStmt       -> WHILE LPAREN Expr RPAREN Block

[MATCH]    Línea  78, Col  13  Terminal esperado: WHILE            Token actual: WHILE           ('while')
[MATCH]    Línea  78, Col  19  Terminal esperado: LPAREN           Token actual: LPAREN          ('(')
[EXPAND]   No-terminal: Expr             Lookahead: IDENTIFIER      ('j')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: IDENTIFIER      ('j')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: IDENTIFIER      ('j')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: IDENTIFIER      ('j')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: IDENTIFIER      ('j')
[RULE]     Factor          -> IDENTIFIER

[MATCH]    Línea  78, Col  20  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('j')
[EXPAND]   No-terminal: Term'            Lookahead: GT              ('>')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: GT              ('>')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: GT              ('>')
[RULE]     RelExpr'        -> GT AddExpr RelExpr'

[MATCH]    Línea  78, Col  22  Terminal esperado: GT               Token actual: GT              ('>')
[EXPAND]   No-terminal: AddExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('0')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('0')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  78, Col  24  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('0')
[EXPAND]   No-terminal: Term'            Lookahead: RPAREN          (')')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: RPAREN          (')')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: RPAREN          (')')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: RPAREN          (')')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: RPAREN          (')')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: RPAREN          (')')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  78, Col  25  Terminal esperado: RPAREN           Token actual: RPAREN          (')')
[EXPAND]   No-terminal: Block            Lookahead: LBRACE          ('{')
[RULE]     Block           -> LBRACE StmtList RBRACE

[MATCH]    Línea  78, Col  27  Terminal esperado: LBRACE           Token actual: LBRACE          ('{')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('j')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('j')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('j')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  79, Col  17  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('j')
[MATCH]    Línea  79, Col  19  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: IDENTIFIER      ('j')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: IDENTIFIER      ('j')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: IDENTIFIER      ('j')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: IDENTIFIER      ('j')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: IDENTIFIER      ('j')
[RULE]     Factor          -> IDENTIFIER

[MATCH]    Línea  79, Col  21  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('j')
[EXPAND]   No-terminal: Term'            Lookahead: MINUS           ('-')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: MINUS           ('-')
[RULE]     AddExpr'        -> MINUS Term AddExpr'

[MATCH]    Línea  79, Col  23  Terminal esperado: MINUS            Token actual: MINUS           ('-')
[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('1')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('1')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  79, Col  25  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('1')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  79, Col  26  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: RBRACE          ('}')
[RULE]     StmtList        -> ε

[MATCH]    Línea  80, Col  13  Terminal esperado: RBRACE           Token actual: RBRACE          ('}')
[EXPAND]   No-terminal: StmtList         Lookahead: RBRACE          ('}')
[RULE]     StmtList        -> ε

[MATCH]    Línea  81, Col   9  Terminal esperado: RBRACE           Token actual: RBRACE          ('}')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('i')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('i')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('i')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  83, Col   9  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('i')
[MATCH]    Línea  83, Col  11  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: IDENTIFIER      ('i')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: IDENTIFIER      ('i')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: IDENTIFIER      ('i')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: IDENTIFIER      ('i')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: IDENTIFIER      ('i')
[RULE]     Factor          -> IDENTIFIER

[MATCH]    Línea  83, Col  13  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('i')
[EXPAND]   No-terminal: Term'            Lookahead: PLUS            ('+')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: PLUS            ('+')
[RULE]     AddExpr'        -> PLUS Term AddExpr'

[MATCH]    Línea  83, Col  15  Terminal esperado: PLUS             Token actual: PLUS            ('+')
[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('1')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('1')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  83, Col  17  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('1')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  83, Col  18  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: RBRACE          ('}')
[RULE]     StmtList        -> ε

[MATCH]    Línea  84, Col   5  Terminal esperado: RBRACE           Token actual: RBRACE          ('}')
[EXPAND]   No-terminal: StmtList         Lookahead: EXPORT          ('exportar')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: EXPORT          ('exportar')
[RULE]     Stmt            -> ExportStmt SEMICOLON

[EXPAND]   No-terminal: ExportStmt       Lookahead: EXPORT          ('exportar')
[RULE]     ExportStmt      -> EXPORT IDENTIFIER AS STRING_LITERAL

[MATCH]    Línea  87, Col   5  Terminal esperado: EXPORT           Token actual: EXPORT          ('exportar')
[MATCH]    Línea  87, Col  14  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  87, Col  22  Terminal esperado: AS               Token actual: AS              ('como')
[MATCH]    Línea  87, Col  27  Terminal esperado: STRING_LITERAL   Token actual: STRING_LITERAL  ('salida.mp4"')
[MATCH]    Línea  87, Col  39  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: EXPORT          ('exportar')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: EXPORT          ('exportar')
[RULE]     Stmt            -> ExportStmt SEMICOLON

[EXPAND]   No-terminal: ExportStmt       Lookahead: EXPORT          ('exportar')
[RULE]     ExportStmt      -> EXPORT IDENTIFIER AS STRING_LITERAL

[MATCH]    Línea  88, Col   5  Terminal esperado: EXPORT           Token actual: EXPORT          ('exportar')
[MATCH]    Línea  88, Col  14  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('cancion')
[MATCH]    Línea  88, Col  22  Terminal esperado: AS               Token actual: AS              ('como')
[MATCH]    Línea  88, Col  27  Terminal esperado: STRING_LITERAL   Token actual: STRING_LITERAL  ('salida.mp3"')
[MATCH]    Línea  88, Col  39  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: RBRACE          ('}')
[RULE]     StmtList        -> ε

[MATCH]    Línea  89, Col   1  Terminal esperado: RBRACE           Token actual: RBRACE          ('}')
[MATCH]    Línea  91, Col   1  Terminal esperado: EOF              Token actual: EOF             ('')
=== Fin del parser paso a paso ===

Parse tree visualizado en parsetree.png
Análisis sintáctico completado sin errores.
Análisis semántico OK. Generando AST…
AST visualizado en ast.png
=== Inicio del parser LL(1) paso a paso ===

[EXPAND]   No-terminal: Program          Lookahead: MAIN            ('main')
[RULE]     Program         -> MAIN Block EOF

[MATCH]    Línea   2, Col   1  Terminal esperado: MAIN             Token actual: MAIN            ('main')
[EXPAND]   No-terminal: Block            Lookahead: LBRACE          ('{')
[RULE]     Block           -> LBRACE StmtList RBRACE

[MATCH]    Línea   2, Col   6  Terminal esperado: LBRACE           Token actual: LBRACE          ('{')
[EXPAND]   No-terminal: StmtList         Lookahead: INT_TYPE        ('int')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: INT_TYPE        ('int')
[RULE]     Stmt            -> VarDecl SEMICOLON

[EXPAND]   No-terminal: VarDecl          Lookahead: INT_TYPE        ('int')
[RULE]     VarDecl         -> Type COLON IDENTIFIER VarInitOpt

[EXPAND]   No-terminal: Type             Lookahead: INT_TYPE        ('int')
[RULE]     Type            -> INT_TYPE

[MATCH]    Línea   5, Col   5  Terminal esperado: INT_TYPE         Token actual: INT_TYPE        ('int')
[MATCH]    Línea   5, Col   8  Terminal esperado: COLON            Token actual: COLON           (':')
[MATCH]    Línea   5, Col  13  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('ancho')
[EXPAND]   No-terminal: VarInitOpt       Lookahead: ASSIGN          ('=')
[RULE]     VarInitOpt      -> ASSIGN Expr

[MATCH]    Línea   5, Col  24  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: INT_LITERAL     ('1920')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: INT_LITERAL     ('1920')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: INT_LITERAL     ('1920')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: INT_LITERAL     ('1920')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: INT_LITERAL     ('1920')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: INT_LITERAL     ('1920')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('1920')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('1920')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea   5, Col  26  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('1920')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea   5, Col  30  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: STRING_TYPE     ('string')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: STRING_TYPE     ('string')
[RULE]     Stmt            -> VarDecl SEMICOLON

[EXPAND]   No-terminal: VarDecl          Lookahead: STRING_TYPE     ('string')
[RULE]     VarDecl         -> Type COLON IDENTIFIER VarInitOpt

[EXPAND]   No-terminal: Type             Lookahead: STRING_TYPE     ('string')
[RULE]     Type            -> STRING_TYPE

[MATCH]    Línea   6, Col   5  Terminal esperado: STRING_TYPE      Token actual: STRING_TYPE     ('string')
[MATCH]    Línea   6, Col  11  Terminal esperado: COLON            Token actual: COLON           (':')
[MATCH]    Línea   6, Col  16  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('alto')
[EXPAND]   No-terminal: VarInitOpt       Lookahead: ASSIGN          ('=')
[RULE]     VarInitOpt      -> ASSIGN Expr

[MATCH]    Línea   6, Col  27  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: STRING_LITERAL  ('1080"')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: STRING_LITERAL  ('1080"')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: STRING_LITERAL  ('1080"')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: STRING_LITERAL  ('1080"')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: STRING_LITERAL  ('1080"')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: STRING_LITERAL  ('1080"')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: STRING_LITERAL  ('1080"')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: STRING_LITERAL  ('1080"')
[RULE]     Factor          -> STRING_LITERAL

[MATCH]    Línea   6, Col  29  Terminal esperado: STRING_LITERAL   Token actual: STRING_LITERAL  ('1080"')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea   6, Col  35  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: FLOAT_TYPE      ('float')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: FLOAT_TYPE      ('float')
[RULE]     Stmt            -> VarDecl SEMICOLON

[EXPAND]   No-terminal: VarDecl          Lookahead: FLOAT_TYPE      ('float')
[RULE]     VarDecl         -> Type COLON IDENTIFIER VarInitOpt

[EXPAND]   No-terminal: Type             Lookahead: FLOAT_TYPE      ('float')
[RULE]     Type            -> FLOAT_TYPE

[MATCH]    Línea   7, Col   5  Terminal esperado: FLOAT_TYPE       Token actual: FLOAT_TYPE      ('float')
[MATCH]    Línea   7, Col  10  Terminal esperado: COLON            Token actual: COLON           (':')
[MATCH]    Línea   7, Col  13  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('escala')
[EXPAND]   No-terminal: VarInitOpt       Lookahead: ASSIGN          ('=')
[RULE]     VarInitOpt      -> ASSIGN Expr

[MATCH]    Línea   7, Col  24  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: FLOAT_LITERAL   ('1.5')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: FLOAT_LITERAL   ('1.5')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: FLOAT_LITERAL   ('1.5')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: FLOAT_LITERAL   ('1.5')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: FLOAT_LITERAL   ('1.5')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: FLOAT_LITERAL   ('1.5')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: FLOAT_LITERAL   ('1.5')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: FLOAT_LITERAL   ('1.5')
[RULE]     Factor          -> FLOAT_LITERAL

[MATCH]    Línea   7, Col  26  Terminal esperado: FLOAT_LITERAL    Token actual: FLOAT_LITERAL   ('1.5')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea   7, Col  29  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: STRING_TYPE     ('string')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: STRING_TYPE     ('string')
[RULE]     Stmt            -> VarDecl SEMICOLON

[EXPAND]   No-terminal: VarDecl          Lookahead: STRING_TYPE     ('string')
[RULE]     VarDecl         -> Type COLON IDENTIFIER VarInitOpt

[EXPAND]   No-terminal: Type             Lookahead: STRING_TYPE     ('string')
[RULE]     Type            -> STRING_TYPE

[MATCH]    Línea   8, Col   5  Terminal esperado: STRING_TYPE      Token actual: STRING_TYPE     ('string')
[MATCH]    Línea   8, Col  11  Terminal esperado: COLON            Token actual: COLON           (':')
[MATCH]    Línea   8, Col  13  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('titulo')
[EXPAND]   No-terminal: VarInitOpt       Lookahead: ASSIGN          ('=')
[RULE]     VarInitOpt      -> ASSIGN Expr

[MATCH]    Línea   8, Col  24  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: STRING_LITERAL  ('Mi video personal"')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: STRING_LITERAL  ('Mi video personal"')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: STRING_LITERAL  ('Mi video personal"')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: STRING_LITERAL  ('Mi video personal"')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: STRING_LITERAL  ('Mi video personal"')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: STRING_LITERAL  ('Mi video personal"')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: STRING_LITERAL  ('Mi video personal"')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: STRING_LITERAL  ('Mi video personal"')
[RULE]     Factor          -> STRING_LITERAL

[MATCH]    Línea   8, Col  26  Terminal esperado: STRING_LITERAL   Token actual: STRING_LITERAL  ('Mi video personal"')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea   8, Col  45  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: VIDEO_TYPE      ('video')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: VIDEO_TYPE      ('video')
[RULE]     Stmt            -> VarDecl SEMICOLON

[EXPAND]   No-terminal: VarDecl          Lookahead: VIDEO_TYPE      ('video')
[RULE]     VarDecl         -> Type COLON IDENTIFIER VarInitOpt

[EXPAND]   No-terminal: Type             Lookahead: VIDEO_TYPE      ('video')
[RULE]     Type            -> VIDEO_TYPE

[MATCH]    Línea  10, Col   5  Terminal esperado: VIDEO_TYPE       Token actual: VIDEO_TYPE      ('video')
[MATCH]    Línea  10, Col  10  Terminal esperado: COLON            Token actual: COLON           (':')
[MATCH]    Línea  10, Col  13  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[EXPAND]   No-terminal: VarInitOpt       Lookahead: ASSIGN          ('=')
[RULE]     VarInitOpt      -> ASSIGN Expr

[MATCH]    Línea  10, Col  24  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: STRING_LITERAL  ('intro.mp4"')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: STRING_LITERAL  ('intro.mp4"')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: STRING_LITERAL  ('intro.mp4"')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: STRING_LITERAL  ('intro.mp4"')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: STRING_LITERAL  ('intro.mp4"')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: STRING_LITERAL  ('intro.mp4"')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: STRING_LITERAL  ('intro.mp4"')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: STRING_LITERAL  ('intro.mp4"')
[RULE]     Factor          -> STRING_LITERAL

[MATCH]    Línea  10, Col  26  Terminal esperado: STRING_LITERAL   Token actual: STRING_LITERAL  ('intro.mp4"')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  10, Col  37  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: AUDIO_TYPE      ('audio')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: AUDIO_TYPE      ('audio')
[RULE]     Stmt            -> VarDecl SEMICOLON

[EXPAND]   No-terminal: VarDecl          Lookahead: AUDIO_TYPE      ('audio')
[RULE]     VarDecl         -> Type COLON IDENTIFIER VarInitOpt

[EXPAND]   No-terminal: Type             Lookahead: AUDIO_TYPE      ('audio')
[RULE]     Type            -> AUDIO_TYPE

[MATCH]    Línea  11, Col   5  Terminal esperado: AUDIO_TYPE       Token actual: AUDIO_TYPE      ('audio')
[MATCH]    Línea  11, Col  10  Terminal esperado: COLON            Token actual: COLON           (':')
[MATCH]    Línea  11, Col  13  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('cancion')
[EXPAND]   No-terminal: VarInitOpt       Lookahead: ASSIGN          ('=')
[RULE]     VarInitOpt      -> ASSIGN Expr

[MATCH]    Línea  11, Col  24  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: STRING_LITERAL  ('musica.mp3"')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: STRING_LITERAL  ('musica.mp3"')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: STRING_LITERAL  ('musica.mp3"')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: STRING_LITERAL  ('musica.mp3"')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: STRING_LITERAL  ('musica.mp3"')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: STRING_LITERAL  ('musica.mp3"')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: STRING_LITERAL  ('musica.mp3"')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: STRING_LITERAL  ('musica.mp3"')
[RULE]     Factor          -> STRING_LITERAL

[MATCH]    Línea  11, Col  26  Terminal esperado: STRING_LITERAL   Token actual: STRING_LITERAL  ('musica.mp3"')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  11, Col  38  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('ancho')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('ancho')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('ancho')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  14, Col   5  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('ancho')
[MATCH]    Línea  14, Col  12  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: IDENTIFIER      ('ancho')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: IDENTIFIER      ('ancho')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: IDENTIFIER      ('ancho')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: IDENTIFIER      ('ancho')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: IDENTIFIER      ('ancho')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: IDENTIFIER      ('ancho')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: IDENTIFIER      ('ancho')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: IDENTIFIER      ('ancho')
[RULE]     Factor          -> IDENTIFIER

[MATCH]    Línea  14, Col  14  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('ancho')
[EXPAND]   No-terminal: Term'            Lookahead: PLUS            ('+')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: PLUS            ('+')
[RULE]     AddExpr'        -> PLUS Term AddExpr'

[MATCH]    Línea  14, Col  20  Terminal esperado: PLUS             Token actual: PLUS            ('+')
[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('80')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('80')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  14, Col  22  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('80')
[EXPAND]   No-terminal: Term'            Lookahead: DIV             ('/')
[RULE]     Term'           -> DIV Factor Term'

[MATCH]    Línea  14, Col  25  Terminal esperado: DIV              Token actual: DIV             ('/')
[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('2')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  14, Col  27  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('2')
[EXPAND]   No-terminal: Term'            Lookahead: MINUS           ('-')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: MINUS           ('-')
[RULE]     AddExpr'        -> MINUS Term AddExpr'

[MATCH]    Línea  14, Col  29  Terminal esperado: MINUS            Token actual: MINUS           ('-')
[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('10')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('10')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  14, Col  31  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('10')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  14, Col  33  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('escala')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('escala')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('escala')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  15, Col   5  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('escala')
[MATCH]    Línea  15, Col  12  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: LPAREN          ('(')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: LPAREN          ('(')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: LPAREN          ('(')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: LPAREN          ('(')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: LPAREN          ('(')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: LPAREN          ('(')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: LPAREN          ('(')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: LPAREN          ('(')
[RULE]     Factor          -> LPAREN Expr RPAREN

[MATCH]    Línea  15, Col  14  Terminal esperado: LPAREN           Token actual: LPAREN          ('(')
[EXPAND]   No-terminal: Expr             Lookahead: IDENTIFIER      ('escala')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: IDENTIFIER      ('escala')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: IDENTIFIER      ('escala')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: IDENTIFIER      ('escala')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: IDENTIFIER      ('escala')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: IDENTIFIER      ('escala')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: IDENTIFIER      ('escala')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: IDENTIFIER      ('escala')
[RULE]     Factor          -> IDENTIFIER

[MATCH]    Línea  15, Col  15  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('escala')
[EXPAND]   No-terminal: Term'            Lookahead: MULT            ('*')
[RULE]     Term'           -> MULT Factor Term'

[MATCH]    Línea  15, Col  22  Terminal esperado: MULT             Token actual: MULT            ('*')
[EXPAND]   No-terminal: Factor           Lookahead: FLOAT_LITERAL   ('2.0')
[RULE]     Factor          -> FLOAT_LITERAL

[MATCH]    Línea  15, Col  24  Terminal esperado: FLOAT_LITERAL    Token actual: FLOAT_LITERAL   ('2.0')
[EXPAND]   No-terminal: Term'            Lookahead: RPAREN          (')')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: RPAREN          (')')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: RPAREN          (')')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: RPAREN          (')')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: RPAREN          (')')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: RPAREN          (')')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  15, Col  27  Terminal esperado: RPAREN           Token actual: RPAREN          (')')
[EXPAND]   No-terminal: Term'            Lookahead: DIV             ('/')
[RULE]     Term'           -> DIV Factor Term'

[MATCH]    Línea  15, Col  29  Terminal esperado: DIV              Token actual: DIV             ('/')
[EXPAND]   No-terminal: Factor           Lookahead: FLOAT_LITERAL   ('3.0')
[RULE]     Factor          -> FLOAT_LITERAL

[MATCH]    Línea  15, Col  31  Terminal esperado: FLOAT_LITERAL    Token actual: FLOAT_LITERAL   ('3.0')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  15, Col  34  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('intro')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('intro')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('intro')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  18, Col   5  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  18, Col  11  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: VIDEO_RESIZE    ('@resize')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: VIDEO_RESIZE    ('@resize')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: VIDEO_RESIZE    ('@resize')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: VIDEO_RESIZE    ('@resize')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: VIDEO_RESIZE    ('@resize')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: VIDEO_RESIZE    ('@resize')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: VIDEO_RESIZE    ('@resize')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: VIDEO_RESIZE    ('@resize')
[RULE]     Factor          -> FunctionCall

[EXPAND]   No-terminal: FunctionCall     Lookahead: VIDEO_RESIZE    ('@resize')
[RULE]     FunctionCall    -> VIDEO_RESIZE LBRACKET ResizeArgs RBRACKET

[MATCH]    Línea  18, Col  13  Terminal esperado: VIDEO_RESIZE     Token actual: VIDEO_RESIZE    ('@resize')
[MATCH]    Línea  18, Col  20  Terminal esperado: LBRACKET         Token actual: LBRACKET        ('[')
[EXPAND]   No-terminal: ResizeArgs       Lookahead: IDENTIFIER      ('intro')
[RULE]     ResizeArgs      -> IDENTIFIER COMMA INT_LITERAL COMMA INT_LITERAL

[MATCH]    Línea  18, Col  21  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  18, Col  26  Terminal esperado: COMMA            Token actual: COMMA           (',')
[MATCH]    Línea  18, Col  28  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('1280')
[MATCH]    Línea  18, Col  32  Terminal esperado: COMMA            Token actual: COMMA           (',')
[MATCH]    Línea  18, Col  34  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('720')
[MATCH]    Línea  18, Col  37  Terminal esperado: RBRACKET         Token actual: RBRACKET        (']')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  18, Col  38  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('intro')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('intro')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('intro')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  19, Col   5  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  19, Col  11  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     Factor          -> FunctionCall

[EXPAND]   No-terminal: FunctionCall     Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     FunctionCall    -> VIDEO_FLIP LBRACKET FlipArgs RBRACKET

[MATCH]    Línea  19, Col  13  Terminal esperado: VIDEO_FLIP       Token actual: VIDEO_FLIP      ('@flip')
[MATCH]    Línea  19, Col  18  Terminal esperado: LBRACKET         Token actual: LBRACKET        ('[')
[EXPAND]   No-terminal: FlipArgs         Lookahead: STRING_LITERAL  ('horizontal"')
[RULE]     FlipArgs        -> STRING_LITERAL

[MATCH]    Línea  19, Col  19  Terminal esperado: STRING_LITERAL   Token actual: STRING_LITERAL  ('horizontal"')
[MATCH]    Línea  19, Col  31  Terminal esperado: RBRACKET         Token actual: RBRACKET        (']')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  19, Col  32  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('intro')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('intro')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('intro')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  20, Col   5  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  20, Col  11  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     Factor          -> FunctionCall

[EXPAND]   No-terminal: FunctionCall     Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     FunctionCall    -> VIDEO_VELOCIDAD LBRACKET VelocidadArgs RBRACKET

[MATCH]    Línea  20, Col  13  Terminal esperado: VIDEO_VELOCIDAD  Token actual: VIDEO_VELOCIDAD ('@velocidad')
[MATCH]    Línea  20, Col  23  Terminal esperado: LBRACKET         Token actual: LBRACKET        ('[')
[EXPAND]   No-terminal: VelocidadArgs    Lookahead: INT_LITERAL     ('1')
[RULE]     VelocidadArgs   -> Number

[EXPAND]   No-terminal: Number           Lookahead: INT_LITERAL     ('1')
[RULE]     Number          -> INT_LITERAL

[MATCH]    Línea  20, Col  24  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('1')
[MATCH]    Línea  20, Col  25  Terminal esperado: RBRACKET         Token actual: RBRACKET        (']')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  20, Col  26  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('intro')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('intro')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('intro')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  21, Col   5  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  21, Col  11  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: VIDEO_FADEIN    ('@fadein')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: VIDEO_FADEIN    ('@fadein')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: VIDEO_FADEIN    ('@fadein')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: VIDEO_FADEIN    ('@fadein')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: VIDEO_FADEIN    ('@fadein')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: VIDEO_FADEIN    ('@fadein')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: VIDEO_FADEIN    ('@fadein')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: VIDEO_FADEIN    ('@fadein')
[RULE]     Factor          -> FunctionCall

[EXPAND]   No-terminal: FunctionCall     Lookahead: VIDEO_FADEIN    ('@fadein')
[RULE]     FunctionCall    -> VIDEO_FADEIN LBRACKET FadeInArgs RBRACKET

[MATCH]    Línea  21, Col  13  Terminal esperado: VIDEO_FADEIN     Token actual: VIDEO_FADEIN    ('@fadein')
[MATCH]    Línea  21, Col  20  Terminal esperado: LBRACKET         Token actual: LBRACKET        ('[')
[EXPAND]   No-terminal: FadeInArgs       Lookahead: FLOAT_LITERAL   ('2.0')
[RULE]     FadeInArgs      -> Number

[EXPAND]   No-terminal: Number           Lookahead: FLOAT_LITERAL   ('2.0')
[RULE]     Number          -> FLOAT_LITERAL

[MATCH]    Línea  21, Col  21  Terminal esperado: FLOAT_LITERAL    Token actual: FLOAT_LITERAL   ('2.0')
[MATCH]    Línea  21, Col  24  Terminal esperado: RBRACKET         Token actual: RBRACKET        (']')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  21, Col  25  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('intro')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('intro')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('intro')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  22, Col   5  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  22, Col  11  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: VIDEO_FADEOUT   ('@fadeout')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: VIDEO_FADEOUT   ('@fadeout')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: VIDEO_FADEOUT   ('@fadeout')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: VIDEO_FADEOUT   ('@fadeout')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: VIDEO_FADEOUT   ('@fadeout')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: VIDEO_FADEOUT   ('@fadeout')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: VIDEO_FADEOUT   ('@fadeout')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: VIDEO_FADEOUT   ('@fadeout')
[RULE]     Factor          -> FunctionCall

[EXPAND]   No-terminal: FunctionCall     Lookahead: VIDEO_FADEOUT   ('@fadeout')
[RULE]     FunctionCall    -> VIDEO_FADEOUT LBRACKET FadeOutArgs RBRACKET

[MATCH]    Línea  22, Col  13  Terminal esperado: VIDEO_FADEOUT    Token actual: VIDEO_FADEOUT   ('@fadeout')
[MATCH]    Línea  22, Col  21  Terminal esperado: LBRACKET         Token actual: LBRACKET        ('[')
[EXPAND]   No-terminal: FadeOutArgs      Lookahead: FLOAT_LITERAL   ('3.5')
[RULE]     FadeOutArgs     -> Number

[EXPAND]   No-terminal: Number           Lookahead: FLOAT_LITERAL   ('3.5')
[RULE]     Number          -> FLOAT_LITERAL

[MATCH]    Línea  22, Col  22  Terminal esperado: FLOAT_LITERAL    Token actual: FLOAT_LITERAL   ('3.5')
[MATCH]    Línea  22, Col  25  Terminal esperado: RBRACKET         Token actual: RBRACKET        (']')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  22, Col  26  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('intro')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('intro')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('intro')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  23, Col   5  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  23, Col  11  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: VIDEO_SILENCIO  ('@silencio')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: VIDEO_SILENCIO  ('@silencio')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: VIDEO_SILENCIO  ('@silencio')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: VIDEO_SILENCIO  ('@silencio')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: VIDEO_SILENCIO  ('@silencio')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: VIDEO_SILENCIO  ('@silencio')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: VIDEO_SILENCIO  ('@silencio')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: VIDEO_SILENCIO  ('@silencio')
[RULE]     Factor          -> FunctionCall

[EXPAND]   No-terminal: FunctionCall     Lookahead: VIDEO_SILENCIO  ('@silencio')
[RULE]     FunctionCall    -> VIDEO_SILENCIO LBRACKET EmptyArgs RBRACKET

[MATCH]    Línea  23, Col  13  Terminal esperado: VIDEO_SILENCIO   Token actual: VIDEO_SILENCIO  ('@silencio')
[MATCH]    Línea  23, Col  22  Terminal esperado: LBRACKET         Token actual: LBRACKET        ('[')
[EXPAND]   No-terminal: EmptyArgs        Lookahead: RBRACKET        (']')
[RULE]     EmptyArgs       -> ε

[MATCH]    Línea  23, Col  23  Terminal esperado: RBRACKET         Token actual: RBRACKET        (']')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  23, Col  24  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('intro')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('intro')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('intro')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  24, Col   5  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  24, Col  11  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: VIDEO_QUITAR_AUDIO ('@quitar_audio')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: VIDEO_QUITAR_AUDIO ('@quitar_audio')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: VIDEO_QUITAR_AUDIO ('@quitar_audio')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: VIDEO_QUITAR_AUDIO ('@quitar_audio')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: VIDEO_QUITAR_AUDIO ('@quitar_audio')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: VIDEO_QUITAR_AUDIO ('@quitar_audio')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: VIDEO_QUITAR_AUDIO ('@quitar_audio')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: VIDEO_QUITAR_AUDIO ('@quitar_audio')
[RULE]     Factor          -> FunctionCall

[EXPAND]   No-terminal: FunctionCall     Lookahead: VIDEO_QUITAR_AUDIO ('@quitar_audio')
[RULE]     FunctionCall    -> VIDEO_QUITAR_AUDIO LBRACKET EmptyArgs RBRACKET

[MATCH]    Línea  24, Col  13  Terminal esperado: VIDEO_QUITAR_AUDIO  Token actual: VIDEO_QUITAR_AUDIO ('@quitar_audio')
[MATCH]    Línea  24, Col  26  Terminal esperado: LBRACKET         Token actual: LBRACKET        ('[')
[EXPAND]   No-terminal: EmptyArgs        Lookahead: RBRACKET        (']')
[RULE]     EmptyArgs       -> ε

[MATCH]    Línea  24, Col  27  Terminal esperado: RBRACKET         Token actual: RBRACKET        (']')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  24, Col  28  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('intro')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('intro')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('intro')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  25, Col   5  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  25, Col  11  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: VIDEO_AGREGAR_MUSICA ('@agregar_musica')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: VIDEO_AGREGAR_MUSICA ('@agregar_musica')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: VIDEO_AGREGAR_MUSICA ('@agregar_musica')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: VIDEO_AGREGAR_MUSICA ('@agregar_musica')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: VIDEO_AGREGAR_MUSICA ('@agregar_musica')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: VIDEO_AGREGAR_MUSICA ('@agregar_musica')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: VIDEO_AGREGAR_MUSICA ('@agregar_musica')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: VIDEO_AGREGAR_MUSICA ('@agregar_musica')
[RULE]     Factor          -> FunctionCall

[EXPAND]   No-terminal: FunctionCall     Lookahead: VIDEO_AGREGAR_MUSICA ('@agregar_musica')
[RULE]     FunctionCall    -> VIDEO_AGREGAR_MUSICA LBRACKET AgregarMusicaArgs RBRACKET

[MATCH]    Línea  25, Col  13  Terminal esperado: VIDEO_AGREGAR_MUSICA  Token actual: VIDEO_AGREGAR_MUSICA ('@agregar_musica')
[MATCH]    Línea  25, Col  28  Terminal esperado: LBRACKET         Token actual: LBRACKET        ('[')
[EXPAND]   No-terminal: AgregarMusicaArgs  Lookahead: STRING_LITERAL  ('musica.mp3"')
[RULE]     AgregarMusicaArgs -> STRING_LITERAL

[MATCH]    Línea  25, Col  29  Terminal esperado: STRING_LITERAL   Token actual: STRING_LITERAL  ('musica.mp3"')
[MATCH]    Línea  25, Col  41  Terminal esperado: RBRACKET         Token actual: RBRACKET        (']')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  25, Col  42  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('intro')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('intro')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('intro')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  26, Col   5  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  26, Col  11  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: VIDEO_CONCATENAR ('@concatenar')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: VIDEO_CONCATENAR ('@concatenar')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: VIDEO_CONCATENAR ('@concatenar')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: VIDEO_CONCATENAR ('@concatenar')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: VIDEO_CONCATENAR ('@concatenar')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: VIDEO_CONCATENAR ('@concatenar')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: VIDEO_CONCATENAR ('@concatenar')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: VIDEO_CONCATENAR ('@concatenar')
[RULE]     Factor          -> FunctionCall

[EXPAND]   No-terminal: FunctionCall     Lookahead: VIDEO_CONCATENAR ('@concatenar')
[RULE]     FunctionCall    -> VIDEO_CONCATENAR LBRACKET ConcatenarArgs RBRACKET

[MATCH]    Línea  26, Col  13  Terminal esperado: VIDEO_CONCATENAR  Token actual: VIDEO_CONCATENAR ('@concatenar')
[MATCH]    Línea  26, Col  24  Terminal esperado: LBRACKET         Token actual: LBRACKET        ('[')
[EXPAND]   No-terminal: ConcatenarArgs   Lookahead: IDENTIFIER      ('intro')
[RULE]     ConcatenarArgs  -> IDENTIFIER COMMA IDENTIFIER

[MATCH]    Línea  26, Col  25  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  26, Col  30  Terminal esperado: COMMA            Token actual: COMMA           (',')
[MATCH]    Línea  26, Col  32  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  26, Col  37  Terminal esperado: RBRACKET         Token actual: RBRACKET        (']')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  26, Col  38  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('intro')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('intro')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('intro')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  27, Col   5  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  27, Col  11  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: VIDEO_CORTAR    ('@cortar')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: VIDEO_CORTAR    ('@cortar')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: VIDEO_CORTAR    ('@cortar')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: VIDEO_CORTAR    ('@cortar')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: VIDEO_CORTAR    ('@cortar')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: VIDEO_CORTAR    ('@cortar')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: VIDEO_CORTAR    ('@cortar')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: VIDEO_CORTAR    ('@cortar')
[RULE]     Factor          -> FunctionCall

[EXPAND]   No-terminal: FunctionCall     Lookahead: VIDEO_CORTAR    ('@cortar')
[RULE]     FunctionCall    -> VIDEO_CORTAR LBRACKET CortarArgs RBRACKET

[MATCH]    Línea  27, Col  13  Terminal esperado: VIDEO_CORTAR     Token actual: VIDEO_CORTAR    ('@cortar')
[MATCH]    Línea  27, Col  20  Terminal esperado: LBRACKET         Token actual: LBRACKET        ('[')
[EXPAND]   No-terminal: CortarArgs       Lookahead: INT_LITERAL     ('10')
[RULE]     CortarArgs      -> Number COMMA Number

[EXPAND]   No-terminal: Number           Lookahead: INT_LITERAL     ('10')
[RULE]     Number          -> INT_LITERAL

[MATCH]    Línea  27, Col  21  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('10')
[MATCH]    Línea  27, Col  23  Terminal esperado: COMMA            Token actual: COMMA           (',')
[EXPAND]   No-terminal: Number           Lookahead: INT_LITERAL     ('20')
[RULE]     Number          -> INT_LITERAL

[MATCH]    Línea  27, Col  25  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('20')
[MATCH]    Línea  27, Col  27  Terminal esperado: RBRACKET         Token actual: RBRACKET        (']')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  27, Col  28  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: INT_TYPE        ('int')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: INT_TYPE        ('int')
[RULE]     Stmt            -> VarDecl SEMICOLON

[EXPAND]   No-terminal: VarDecl          Lookahead: INT_TYPE        ('int')
[RULE]     VarDecl         -> Type COLON IDENTIFIER VarInitOpt

[EXPAND]   No-terminal: Type             Lookahead: INT_TYPE        ('int')
[RULE]     Type            -> INT_TYPE

[MATCH]    Línea  29, Col   5  Terminal esperado: INT_TYPE         Token actual: INT_TYPE        ('int')
[MATCH]    Línea  29, Col   8  Terminal esperado: COLON            Token actual: COLON           (':')
[MATCH]    Línea  29, Col  10  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('es_horizontal')
[EXPAND]   No-terminal: VarInitOpt       Lookahead: ASSIGN          ('=')
[RULE]     VarInitOpt      -> ASSIGN Expr

[MATCH]    Línea  29, Col  24  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: INT_LITERAL     ('1')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: INT_LITERAL     ('1')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: INT_LITERAL     ('1')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: INT_LITERAL     ('1')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: INT_LITERAL     ('1')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: INT_LITERAL     ('1')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('1')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('1')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  29, Col  26  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('1')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  29, Col  27  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: IF              ('if')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IF              ('if')
[RULE]     Stmt            -> IfStmt

[EXPAND]   No-terminal: IfStmt           Lookahead: IF              ('if')
[RULE]     IfStmt          -> IF LPAREN Expr RPAREN Block ElseOpt

[MATCH]    Línea  32, Col   5  Terminal esperado: IF               Token actual: IF              ('if')
[MATCH]    Línea  32, Col   8  Terminal esperado: LPAREN           Token actual: LPAREN          ('(')
[EXPAND]   No-terminal: Expr             Lookahead: IDENTIFIER      ('es_horizontal')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: IDENTIFIER      ('es_horizontal')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: IDENTIFIER      ('es_horizontal')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: IDENTIFIER      ('es_horizontal')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: IDENTIFIER      ('es_horizontal')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: IDENTIFIER      ('es_horizontal')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: IDENTIFIER      ('es_horizontal')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: IDENTIFIER      ('es_horizontal')
[RULE]     Factor          -> IDENTIFIER

[MATCH]    Línea  32, Col   9  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('es_horizontal')
[EXPAND]   No-terminal: Term'            Lookahead: RPAREN          (')')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: RPAREN          (')')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: RPAREN          (')')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: RPAREN          (')')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: RPAREN          (')')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: RPAREN          (')')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  32, Col  22  Terminal esperado: RPAREN           Token actual: RPAREN          (')')
[EXPAND]   No-terminal: Block            Lookahead: LBRACE          ('{')
[RULE]     Block           -> LBRACE StmtList RBRACE

[MATCH]    Línea  32, Col  24  Terminal esperado: LBRACE           Token actual: LBRACE          ('{')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('intro')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('intro')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('intro')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  33, Col   9  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  33, Col  15  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     Factor          -> FunctionCall

[EXPAND]   No-terminal: FunctionCall     Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     FunctionCall    -> VIDEO_FLIP LBRACKET FlipArgs RBRACKET

[MATCH]    Línea  33, Col  17  Terminal esperado: VIDEO_FLIP       Token actual: VIDEO_FLIP      ('@flip')
[MATCH]    Línea  33, Col  22  Terminal esperado: LBRACKET         Token actual: LBRACKET        ('[')
[EXPAND]   No-terminal: FlipArgs         Lookahead: STRING_LITERAL  ('vertical"')
[RULE]     FlipArgs        -> STRING_LITERAL

[MATCH]    Línea  33, Col  23  Terminal esperado: STRING_LITERAL   Token actual: STRING_LITERAL  ('vertical"')
[MATCH]    Línea  33, Col  33  Terminal esperado: RBRACKET         Token actual: RBRACKET        (']')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  33, Col  34  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: RBRACE          ('}')
[RULE]     StmtList        -> ε

[MATCH]    Línea  34, Col   5  Terminal esperado: RBRACE           Token actual: RBRACE          ('}')
[EXPAND]   No-terminal: ElseOpt          Lookahead: ELSE            ('else')
[RULE]     ElseOpt         -> ELSE Block

[MATCH]    Línea  34, Col   7  Terminal esperado: ELSE             Token actual: ELSE            ('else')
[EXPAND]   No-terminal: Block            Lookahead: LBRACE          ('{')
[RULE]     Block           -> LBRACE StmtList RBRACE

[MATCH]    Línea  34, Col  12  Terminal esperado: LBRACE           Token actual: LBRACE          ('{')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('intro')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('intro')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('intro')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  35, Col   9  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  35, Col  15  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     Factor          -> FunctionCall

[EXPAND]   No-terminal: FunctionCall     Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     FunctionCall    -> VIDEO_FLIP LBRACKET FlipArgs RBRACKET

[MATCH]    Línea  35, Col  17  Terminal esperado: VIDEO_FLIP       Token actual: VIDEO_FLIP      ('@flip')
[MATCH]    Línea  35, Col  22  Terminal esperado: LBRACKET         Token actual: LBRACKET        ('[')
[EXPAND]   No-terminal: FlipArgs         Lookahead: STRING_LITERAL  ('horizontal"')
[RULE]     FlipArgs        -> STRING_LITERAL

[MATCH]    Línea  35, Col  23  Terminal esperado: STRING_LITERAL   Token actual: STRING_LITERAL  ('horizontal"')
[MATCH]    Línea  35, Col  35  Terminal esperado: RBRACKET         Token actual: RBRACKET        (']')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  35, Col  36  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: RBRACE          ('}')
[RULE]     StmtList        -> ε

[MATCH]    Línea  36, Col   5  Terminal esperado: RBRACE           Token actual: RBRACE          ('}')
[EXPAND]   No-terminal: StmtList         Lookahead: INT_TYPE        ('int')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: INT_TYPE        ('int')
[RULE]     Stmt            -> VarDecl SEMICOLON

[EXPAND]   No-terminal: VarDecl          Lookahead: INT_TYPE        ('int')
[RULE]     VarDecl         -> Type COLON IDENTIFIER VarInitOpt

[EXPAND]   No-terminal: Type             Lookahead: INT_TYPE        ('int')
[RULE]     Type            -> INT_TYPE

[MATCH]    Línea  38, Col   5  Terminal esperado: INT_TYPE         Token actual: INT_TYPE        ('int')
[MATCH]    Línea  38, Col   8  Terminal esperado: COLON            Token actual: COLON           (':')
[MATCH]    Línea  38, Col  10  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('i')
[EXPAND]   No-terminal: VarInitOpt       Lookahead: ASSIGN          ('=')
[RULE]     VarInitOpt      -> ASSIGN Expr

[MATCH]    Línea  38, Col  12  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: INT_LITERAL     ('0')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: INT_LITERAL     ('0')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: INT_LITERAL     ('0')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('0')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('0')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  38, Col  14  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('0')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  38, Col  15  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: IF              ('if')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IF              ('if')
[RULE]     Stmt            -> IfStmt

[EXPAND]   No-terminal: IfStmt           Lookahead: IF              ('if')
[RULE]     IfStmt          -> IF LPAREN Expr RPAREN Block ElseOpt

[MATCH]    Línea  46, Col   5  Terminal esperado: IF               Token actual: IF              ('if')
[MATCH]    Línea  46, Col   8  Terminal esperado: LPAREN           Token actual: LPAREN          ('(')
[EXPAND]   No-terminal: Expr             Lookahead: IDENTIFIER      ('es_horizontal')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: IDENTIFIER      ('es_horizontal')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: IDENTIFIER      ('es_horizontal')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: IDENTIFIER      ('es_horizontal')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: IDENTIFIER      ('es_horizontal')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: IDENTIFIER      ('es_horizontal')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: IDENTIFIER      ('es_horizontal')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: IDENTIFIER      ('es_horizontal')
[RULE]     Factor          -> IDENTIFIER

[MATCH]    Línea  46, Col   9  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('es_horizontal')
[EXPAND]   No-terminal: Term'            Lookahead: EQ              ('==')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: EQ              ('==')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: EQ              ('==')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: EQ              ('==')
[RULE]     EqualityExpr'   -> EQ RelExpr EqualityExpr'

[MATCH]    Línea  46, Col  23  Terminal esperado: EQ               Token actual: EQ              ('==')
[EXPAND]   No-terminal: RelExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('0')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('0')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  46, Col  26  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('0')
[EXPAND]   No-terminal: Term'            Lookahead: RPAREN          (')')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: RPAREN          (')')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: RPAREN          (')')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: RPAREN          (')')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: RPAREN          (')')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: RPAREN          (')')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  46, Col  27  Terminal esperado: RPAREN           Token actual: RPAREN          (')')
[EXPAND]   No-terminal: Block            Lookahead: LBRACE          ('{')
[RULE]     Block           -> LBRACE StmtList RBRACE

[MATCH]    Línea  46, Col  29  Terminal esperado: LBRACE           Token actual: LBRACE          ('{')
[EXPAND]   No-terminal: StmtList         Lookahead: INT_TYPE        ('int')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: INT_TYPE        ('int')
[RULE]     Stmt            -> VarDecl SEMICOLON

[EXPAND]   No-terminal: VarDecl          Lookahead: INT_TYPE        ('int')
[RULE]     VarDecl         -> Type COLON IDENTIFIER VarInitOpt

[EXPAND]   No-terminal: Type             Lookahead: INT_TYPE        ('int')
[RULE]     Type            -> INT_TYPE

[MATCH]    Línea  47, Col   9  Terminal esperado: INT_TYPE         Token actual: INT_TYPE        ('int')
[MATCH]    Línea  47, Col  12  Terminal esperado: COLON            Token actual: COLON           (':')
[MATCH]    Línea  47, Col  14  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('i')
[EXPAND]   No-terminal: VarInitOpt       Lookahead: ASSIGN          ('=')
[RULE]     VarInitOpt      -> ASSIGN Expr

[MATCH]    Línea  47, Col  16  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: INT_LITERAL     ('0')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: INT_LITERAL     ('0')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: INT_LITERAL     ('0')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('0')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('0')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  47, Col  18  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('0')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  47, Col  19  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: WHILE           ('while')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: WHILE           ('while')
[RULE]     Stmt            -> WhileStmt

[EXPAND]   No-terminal: WhileStmt        Lookahead: WHILE           ('while')
[RULE]     WhileStmt       -> WHILE LPAREN Expr RPAREN Block

[MATCH]    Línea  48, Col   9  Terminal esperado: WHILE            Token actual: WHILE           ('while')
[MATCH]    Línea  48, Col  15  Terminal esperado: LPAREN           Token actual: LPAREN          ('(')
[EXPAND]   No-terminal: Expr             Lookahead: IDENTIFIER      ('i')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: IDENTIFIER      ('i')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: IDENTIFIER      ('i')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: IDENTIFIER      ('i')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: IDENTIFIER      ('i')
[RULE]     Factor          -> IDENTIFIER

[MATCH]    Línea  48, Col  16  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('i')
[EXPAND]   No-terminal: Term'            Lookahead: LT              ('<')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: LT              ('<')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: LT              ('<')
[RULE]     RelExpr'        -> LT AddExpr RelExpr'

[MATCH]    Línea  48, Col  18  Terminal esperado: LT               Token actual: LT              ('<')
[EXPAND]   No-terminal: AddExpr          Lookahead: INT_LITERAL     ('3')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('3')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('3')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  48, Col  20  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('3')
[EXPAND]   No-terminal: Term'            Lookahead: RPAREN          (')')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: RPAREN          (')')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: RPAREN          (')')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: RPAREN          (')')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: RPAREN          (')')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: RPAREN          (')')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  48, Col  21  Terminal esperado: RPAREN           Token actual: RPAREN          (')')
[EXPAND]   No-terminal: Block            Lookahead: LBRACE          ('{')
[RULE]     Block           -> LBRACE StmtList RBRACE

[MATCH]    Línea  48, Col  23  Terminal esperado: LBRACE           Token actual: LBRACE          ('{')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('intro')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('intro')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('intro')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  49, Col  13  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  49, Col  19  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     Factor          -> FunctionCall

[EXPAND]   No-terminal: FunctionCall     Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     FunctionCall    -> VIDEO_FLIP LBRACKET FlipArgs RBRACKET

[MATCH]    Línea  49, Col  21  Terminal esperado: VIDEO_FLIP       Token actual: VIDEO_FLIP      ('@flip')
[MATCH]    Línea  49, Col  26  Terminal esperado: LBRACKET         Token actual: LBRACKET        ('[')
[EXPAND]   No-terminal: FlipArgs         Lookahead: STRING_LITERAL  ('vertical"')
[RULE]     FlipArgs        -> STRING_LITERAL

[MATCH]    Línea  49, Col  27  Terminal esperado: STRING_LITERAL   Token actual: STRING_LITERAL  ('vertical"')
[MATCH]    Línea  49, Col  37  Terminal esperado: RBRACKET         Token actual: RBRACKET        (']')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  49, Col  38  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('i')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('i')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('i')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  50, Col  13  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('i')
[MATCH]    Línea  50, Col  15  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: IDENTIFIER      ('i')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: IDENTIFIER      ('i')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: IDENTIFIER      ('i')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: IDENTIFIER      ('i')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: IDENTIFIER      ('i')
[RULE]     Factor          -> IDENTIFIER

[MATCH]    Línea  50, Col  17  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('i')
[EXPAND]   No-terminal: Term'            Lookahead: PLUS            ('+')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: PLUS            ('+')
[RULE]     AddExpr'        -> PLUS Term AddExpr'

[MATCH]    Línea  50, Col  19  Terminal esperado: PLUS             Token actual: PLUS            ('+')
[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('1')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('1')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  50, Col  21  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('1')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  50, Col  22  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: RBRACE          ('}')
[RULE]     StmtList        -> ε

[MATCH]    Línea  51, Col   9  Terminal esperado: RBRACE           Token actual: RBRACE          ('}')
[EXPAND]   No-terminal: StmtList         Lookahead: RBRACE          ('}')
[RULE]     StmtList        -> ε

[MATCH]    Línea  52, Col   5  Terminal esperado: RBRACE           Token actual: RBRACE          ('}')
[EXPAND]   No-terminal: ElseOpt          Lookahead: ELSE            ('else')
[RULE]     ElseOpt         -> ELSE Block

[MATCH]    Línea  52, Col   7  Terminal esperado: ELSE             Token actual: ELSE            ('else')
[EXPAND]   No-terminal: Block            Lookahead: LBRACE          ('{')
[RULE]     Block           -> LBRACE StmtList RBRACE

[MATCH]    Línea  52, Col  12  Terminal esperado: LBRACE           Token actual: LBRACE          ('{')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('intro')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('intro')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('intro')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  53, Col   9  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  53, Col  15  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     Factor          -> FunctionCall

[EXPAND]   No-terminal: FunctionCall     Lookahead: VIDEO_FLIP      ('@flip')
[RULE]     FunctionCall    -> VIDEO_FLIP LBRACKET FlipArgs RBRACKET

[MATCH]    Línea  53, Col  17  Terminal esperado: VIDEO_FLIP       Token actual: VIDEO_FLIP      ('@flip')
[MATCH]    Línea  53, Col  22  Terminal esperado: LBRACKET         Token actual: LBRACKET        ('[')
[EXPAND]   No-terminal: FlipArgs         Lookahead: STRING_LITERAL  ('horizontal"')
[RULE]     FlipArgs        -> STRING_LITERAL

[MATCH]    Línea  53, Col  23  Terminal esperado: STRING_LITERAL   Token actual: STRING_LITERAL  ('horizontal"')
[MATCH]    Línea  53, Col  35  Terminal esperado: RBRACKET         Token actual: RBRACKET        (']')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  53, Col  36  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: RBRACE          ('}')
[RULE]     StmtList        -> ε

[MATCH]    Línea  54, Col   5  Terminal esperado: RBRACE           Token actual: RBRACE          ('}')
[EXPAND]   No-terminal: StmtList         Lookahead: INT_TYPE        ('int')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: INT_TYPE        ('int')
[RULE]     Stmt            -> VarDecl SEMICOLON

[EXPAND]   No-terminal: VarDecl          Lookahead: INT_TYPE        ('int')
[RULE]     VarDecl         -> Type COLON IDENTIFIER VarInitOpt

[EXPAND]   No-terminal: Type             Lookahead: INT_TYPE        ('int')
[RULE]     Type            -> INT_TYPE

[MATCH]    Línea  56, Col   5  Terminal esperado: INT_TYPE         Token actual: INT_TYPE        ('int')
[MATCH]    Línea  56, Col   8  Terminal esperado: COLON            Token actual: COLON           (':')
[MATCH]    Línea  56, Col  10  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('i')
[EXPAND]   No-terminal: VarInitOpt       Lookahead: ASSIGN          ('=')
[RULE]     VarInitOpt      -> ASSIGN Expr

[MATCH]    Línea  56, Col  12  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: INT_LITERAL     ('0')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: INT_LITERAL     ('0')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: INT_LITERAL     ('0')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('0')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('0')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  56, Col  14  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('0')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  56, Col  15  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: WHILE           ('while')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: WHILE           ('while')
[RULE]     Stmt            -> WhileStmt

[EXPAND]   No-terminal: WhileStmt        Lookahead: WHILE           ('while')
[RULE]     WhileStmt       -> WHILE LPAREN Expr RPAREN Block

[MATCH]    Línea  57, Col   5  Terminal esperado: WHILE            Token actual: WHILE           ('while')
[MATCH]    Línea  57, Col  11  Terminal esperado: LPAREN           Token actual: LPAREN          ('(')
[EXPAND]   No-terminal: Expr             Lookahead: IDENTIFIER      ('i')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: IDENTIFIER      ('i')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: IDENTIFIER      ('i')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: IDENTIFIER      ('i')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: IDENTIFIER      ('i')
[RULE]     Factor          -> IDENTIFIER

[MATCH]    Línea  57, Col  12  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('i')
[EXPAND]   No-terminal: Term'            Lookahead: LT              ('<')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: LT              ('<')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: LT              ('<')
[RULE]     RelExpr'        -> LT AddExpr RelExpr'

[MATCH]    Línea  57, Col  14  Terminal esperado: LT               Token actual: LT              ('<')
[EXPAND]   No-terminal: AddExpr          Lookahead: INT_LITERAL     ('3')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('3')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('3')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  57, Col  16  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('3')
[EXPAND]   No-terminal: Term'            Lookahead: RPAREN          (')')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: RPAREN          (')')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: RPAREN          (')')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: RPAREN          (')')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: RPAREN          (')')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: RPAREN          (')')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  57, Col  17  Terminal esperado: RPAREN           Token actual: RPAREN          (')')
[EXPAND]   No-terminal: Block            Lookahead: LBRACE          ('{')
[RULE]     Block           -> LBRACE StmtList RBRACE

[MATCH]    Línea  57, Col  19  Terminal esperado: LBRACE           Token actual: LBRACE          ('{')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('intro')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('intro')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('intro')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  58, Col   9  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  58, Col  15  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     Factor          -> FunctionCall

[EXPAND]   No-terminal: FunctionCall     Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     FunctionCall    -> VIDEO_VELOCIDAD LBRACKET VelocidadArgs RBRACKET

[MATCH]    Línea  58, Col  17  Terminal esperado: VIDEO_VELOCIDAD  Token actual: VIDEO_VELOCIDAD ('@velocidad')
[MATCH]    Línea  58, Col  27  Terminal esperado: LBRACKET         Token actual: LBRACKET        ('[')
[EXPAND]   No-terminal: VelocidadArgs    Lookahead: INT_LITERAL     ('10')
[RULE]     VelocidadArgs   -> Number

[EXPAND]   No-terminal: Number           Lookahead: INT_LITERAL     ('10')
[RULE]     Number          -> INT_LITERAL

[MATCH]    Línea  58, Col  28  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('10')
[MATCH]    Línea  58, Col  30  Terminal esperado: RBRACKET         Token actual: RBRACKET        (']')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  58, Col  31  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: INT_TYPE        ('int')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: INT_TYPE        ('int')
[RULE]     Stmt            -> VarDecl SEMICOLON

[EXPAND]   No-terminal: VarDecl          Lookahead: INT_TYPE        ('int')
[RULE]     VarDecl         -> Type COLON IDENTIFIER VarInitOpt

[EXPAND]   No-terminal: Type             Lookahead: INT_TYPE        ('int')
[RULE]     Type            -> INT_TYPE

[MATCH]    Línea  59, Col   9  Terminal esperado: INT_TYPE         Token actual: INT_TYPE        ('int')
[MATCH]    Línea  59, Col  12  Terminal esperado: COLON            Token actual: COLON           (':')
[MATCH]    Línea  59, Col  14  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('j')
[EXPAND]   No-terminal: VarInitOpt       Lookahead: ASSIGN          ('=')
[RULE]     VarInitOpt      -> ASSIGN Expr

[MATCH]    Línea  59, Col  16  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: INT_LITERAL     ('0')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: INT_LITERAL     ('0')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: INT_LITERAL     ('0')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('0')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('0')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  59, Col  18  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('0')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  59, Col  19  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: WHILE           ('while')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: WHILE           ('while')
[RULE]     Stmt            -> WhileStmt

[EXPAND]   No-terminal: WhileStmt        Lookahead: WHILE           ('while')
[RULE]     WhileStmt       -> WHILE LPAREN Expr RPAREN Block

[MATCH]    Línea  60, Col   9  Terminal esperado: WHILE            Token actual: WHILE           ('while')
[MATCH]    Línea  60, Col  15  Terminal esperado: LPAREN           Token actual: LPAREN          ('(')
[EXPAND]   No-terminal: Expr             Lookahead: IDENTIFIER      ('j')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: IDENTIFIER      ('j')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: IDENTIFIER      ('j')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: IDENTIFIER      ('j')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: IDENTIFIER      ('j')
[RULE]     Factor          -> IDENTIFIER

[MATCH]    Línea  60, Col  16  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('j')
[EXPAND]   No-terminal: Term'            Lookahead: LT              ('<')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: LT              ('<')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: LT              ('<')
[RULE]     RelExpr'        -> LT AddExpr RelExpr'

[MATCH]    Línea  60, Col  18  Terminal esperado: LT               Token actual: LT              ('<')
[EXPAND]   No-terminal: AddExpr          Lookahead: INT_LITERAL     ('3')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('3')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('3')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  60, Col  20  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('3')
[EXPAND]   No-terminal: Term'            Lookahead: RPAREN          (')')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: RPAREN          (')')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: RPAREN          (')')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: RPAREN          (')')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: RPAREN          (')')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: RPAREN          (')')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  60, Col  21  Terminal esperado: RPAREN           Token actual: RPAREN          (')')
[EXPAND]   No-terminal: Block            Lookahead: LBRACE          ('{')
[RULE]     Block           -> LBRACE StmtList RBRACE

[MATCH]    Línea  60, Col  23  Terminal esperado: LBRACE           Token actual: LBRACE          ('{')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('intro')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('intro')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('intro')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  61, Col  13  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  61, Col  19  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     Factor          -> FunctionCall

[EXPAND]   No-terminal: FunctionCall     Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     FunctionCall    -> VIDEO_VELOCIDAD LBRACKET VelocidadArgs RBRACKET

[MATCH]    Línea  61, Col  21  Terminal esperado: VIDEO_VELOCIDAD  Token actual: VIDEO_VELOCIDAD ('@velocidad')
[MATCH]    Línea  61, Col  31  Terminal esperado: LBRACKET         Token actual: LBRACKET        ('[')
[EXPAND]   No-terminal: VelocidadArgs    Lookahead: INT_LITERAL     ('10')
[RULE]     VelocidadArgs   -> Number

[EXPAND]   No-terminal: Number           Lookahead: INT_LITERAL     ('10')
[RULE]     Number          -> INT_LITERAL

[MATCH]    Línea  61, Col  32  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('10')
[MATCH]    Línea  61, Col  34  Terminal esperado: RBRACKET         Token actual: RBRACKET        (']')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  61, Col  35  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('j')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('j')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('j')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  62, Col  13  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('j')
[MATCH]    Línea  62, Col  15  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: IDENTIFIER      ('j')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: IDENTIFIER      ('j')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: IDENTIFIER      ('j')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: IDENTIFIER      ('j')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: IDENTIFIER      ('j')
[RULE]     Factor          -> IDENTIFIER

[MATCH]    Línea  62, Col  17  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('j')
[EXPAND]   No-terminal: Term'            Lookahead: PLUS            ('+')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: PLUS            ('+')
[RULE]     AddExpr'        -> PLUS Term AddExpr'

[MATCH]    Línea  62, Col  19  Terminal esperado: PLUS             Token actual: PLUS            ('+')
[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('1')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('1')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  62, Col  21  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('1')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  62, Col  22  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: RBRACE          ('}')
[RULE]     StmtList        -> ε

[MATCH]    Línea  63, Col   9  Terminal esperado: RBRACE           Token actual: RBRACE          ('}')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('i')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('i')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('i')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  64, Col   9  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('i')
[MATCH]    Línea  64, Col  11  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: IDENTIFIER      ('i')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: IDENTIFIER      ('i')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: IDENTIFIER      ('i')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: IDENTIFIER      ('i')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: IDENTIFIER      ('i')
[RULE]     Factor          -> IDENTIFIER

[MATCH]    Línea  64, Col  13  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('i')
[EXPAND]   No-terminal: Term'            Lookahead: PLUS            ('+')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: PLUS            ('+')
[RULE]     AddExpr'        -> PLUS Term AddExpr'

[MATCH]    Línea  64, Col  15  Terminal esperado: PLUS             Token actual: PLUS            ('+')
[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('1')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('1')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  64, Col  17  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('1')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  64, Col  18  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: RBRACE          ('}')
[RULE]     StmtList        -> ε

[MATCH]    Línea  65, Col   5  Terminal esperado: RBRACE           Token actual: RBRACE          ('}')
[EXPAND]   No-terminal: StmtList         Lookahead: INT_TYPE        ('int')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: INT_TYPE        ('int')
[RULE]     Stmt            -> VarDecl SEMICOLON

[EXPAND]   No-terminal: VarDecl          Lookahead: INT_TYPE        ('int')
[RULE]     VarDecl         -> Type COLON IDENTIFIER VarInitOpt

[EXPAND]   No-terminal: Type             Lookahead: INT_TYPE        ('int')
[RULE]     Type            -> INT_TYPE

[MATCH]    Línea  67, Col   5  Terminal esperado: INT_TYPE         Token actual: INT_TYPE        ('int')
[MATCH]    Línea  67, Col   8  Terminal esperado: COLON            Token actual: COLON           (':')
[MATCH]    Línea  67, Col  10  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('i')
[EXPAND]   No-terminal: VarInitOpt       Lookahead: ASSIGN          ('=')
[RULE]     VarInitOpt      -> ASSIGN Expr

[MATCH]    Línea  67, Col  12  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: INT_LITERAL     ('0')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: INT_LITERAL     ('0')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: INT_LITERAL     ('0')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('0')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('0')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  67, Col  14  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('0')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  67, Col  15  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: WHILE           ('while')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: WHILE           ('while')
[RULE]     Stmt            -> WhileStmt

[EXPAND]   No-terminal: WhileStmt        Lookahead: WHILE           ('while')
[RULE]     WhileStmt       -> WHILE LPAREN Expr RPAREN Block

[MATCH]    Línea  68, Col   5  Terminal esperado: WHILE            Token actual: WHILE           ('while')
[MATCH]    Línea  68, Col  11  Terminal esperado: LPAREN           Token actual: LPAREN          ('(')
[EXPAND]   No-terminal: Expr             Lookahead: IDENTIFIER      ('i')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: IDENTIFIER      ('i')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: IDENTIFIER      ('i')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: IDENTIFIER      ('i')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: IDENTIFIER      ('i')
[RULE]     Factor          -> IDENTIFIER

[MATCH]    Línea  68, Col  12  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('i')
[EXPAND]   No-terminal: Term'            Lookahead: LT              ('<')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: LT              ('<')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: LT              ('<')
[RULE]     RelExpr'        -> LT AddExpr RelExpr'

[MATCH]    Línea  68, Col  14  Terminal esperado: LT               Token actual: LT              ('<')
[EXPAND]   No-terminal: AddExpr          Lookahead: INT_LITERAL     ('3')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('3')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('3')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  68, Col  16  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('3')
[EXPAND]   No-terminal: Term'            Lookahead: RPAREN          (')')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: RPAREN          (')')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: RPAREN          (')')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: RPAREN          (')')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: RPAREN          (')')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: RPAREN          (')')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  68, Col  17  Terminal esperado: RPAREN           Token actual: RPAREN          (')')
[EXPAND]   No-terminal: Block            Lookahead: LBRACE          ('{')
[RULE]     Block           -> LBRACE StmtList RBRACE

[MATCH]    Línea  68, Col  19  Terminal esperado: LBRACE           Token actual: LBRACE          ('{')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('intro')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('intro')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('intro')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  69, Col   9  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  69, Col  15  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     Factor          -> FunctionCall

[EXPAND]   No-terminal: FunctionCall     Lookahead: VIDEO_VELOCIDAD ('@velocidad')
[RULE]     FunctionCall    -> VIDEO_VELOCIDAD LBRACKET VelocidadArgs RBRACKET

[MATCH]    Línea  69, Col  17  Terminal esperado: VIDEO_VELOCIDAD  Token actual: VIDEO_VELOCIDAD ('@velocidad')
[MATCH]    Línea  69, Col  27  Terminal esperado: LBRACKET         Token actual: LBRACKET        ('[')
[EXPAND]   No-terminal: VelocidadArgs    Lookahead: INT_LITERAL     ('10')
[RULE]     VelocidadArgs   -> Number

[EXPAND]   No-terminal: Number           Lookahead: INT_LITERAL     ('10')
[RULE]     Number          -> INT_LITERAL

[MATCH]    Línea  69, Col  28  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('10')
[MATCH]    Línea  69, Col  30  Terminal esperado: RBRACKET         Token actual: RBRACKET        (']')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  69, Col  31  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: INT_TYPE        ('int')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: INT_TYPE        ('int')
[RULE]     Stmt            -> VarDecl SEMICOLON

[EXPAND]   No-terminal: VarDecl          Lookahead: INT_TYPE        ('int')
[RULE]     VarDecl         -> Type COLON IDENTIFIER VarInitOpt

[EXPAND]   No-terminal: Type             Lookahead: INT_TYPE        ('int')
[RULE]     Type            -> INT_TYPE

[MATCH]    Línea  71, Col   9  Terminal esperado: INT_TYPE         Token actual: INT_TYPE        ('int')
[MATCH]    Línea  71, Col  12  Terminal esperado: COLON            Token actual: COLON           (':')
[MATCH]    Línea  71, Col  14  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('j')
[EXPAND]   No-terminal: VarInitOpt       Lookahead: ASSIGN          ('=')
[RULE]     VarInitOpt      -> ASSIGN Expr

[MATCH]    Línea  71, Col  16  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: INT_LITERAL     ('0')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: INT_LITERAL     ('0')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: INT_LITERAL     ('0')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('0')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('0')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  71, Col  18  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('0')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  71, Col  19  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: IF              ('if')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IF              ('if')
[RULE]     Stmt            -> IfStmt

[EXPAND]   No-terminal: IfStmt           Lookahead: IF              ('if')
[RULE]     IfStmt          -> IF LPAREN Expr RPAREN Block ElseOpt

[MATCH]    Línea  72, Col   9  Terminal esperado: IF               Token actual: IF              ('if')
[MATCH]    Línea  72, Col  12  Terminal esperado: LPAREN           Token actual: LPAREN          ('(')
[EXPAND]   No-terminal: Expr             Lookahead: IDENTIFIER      ('i')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: IDENTIFIER      ('i')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: IDENTIFIER      ('i')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: IDENTIFIER      ('i')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: IDENTIFIER      ('i')
[RULE]     Factor          -> IDENTIFIER

[MATCH]    Línea  72, Col  13  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('i')
[EXPAND]   No-terminal: Term'            Lookahead: EQ              ('==')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: EQ              ('==')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: EQ              ('==')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: EQ              ('==')
[RULE]     EqualityExpr'   -> EQ RelExpr EqualityExpr'

[MATCH]    Línea  72, Col  15  Terminal esperado: EQ               Token actual: EQ              ('==')
[EXPAND]   No-terminal: RelExpr          Lookahead: INT_LITERAL     ('5')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: INT_LITERAL     ('5')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('5')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('5')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  72, Col  18  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('5')
[EXPAND]   No-terminal: Term'            Lookahead: RPAREN          (')')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: RPAREN          (')')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: RPAREN          (')')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: RPAREN          (')')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: RPAREN          (')')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: RPAREN          (')')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  72, Col  19  Terminal esperado: RPAREN           Token actual: RPAREN          (')')
[EXPAND]   No-terminal: Block            Lookahead: LBRACE          ('{')
[RULE]     Block           -> LBRACE StmtList RBRACE

[MATCH]    Línea  72, Col  20  Terminal esperado: LBRACE           Token actual: LBRACE          ('{')
[EXPAND]   No-terminal: StmtList         Lookahead: WHILE           ('while')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: WHILE           ('while')
[RULE]     Stmt            -> WhileStmt

[EXPAND]   No-terminal: WhileStmt        Lookahead: WHILE           ('while')
[RULE]     WhileStmt       -> WHILE LPAREN Expr RPAREN Block

[MATCH]    Línea  73, Col  13  Terminal esperado: WHILE            Token actual: WHILE           ('while')
[MATCH]    Línea  73, Col  19  Terminal esperado: LPAREN           Token actual: LPAREN          ('(')
[EXPAND]   No-terminal: Expr             Lookahead: IDENTIFIER      ('j')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: IDENTIFIER      ('j')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: IDENTIFIER      ('j')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: IDENTIFIER      ('j')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: IDENTIFIER      ('j')
[RULE]     Factor          -> IDENTIFIER

[MATCH]    Línea  73, Col  20  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('j')
[EXPAND]   No-terminal: Term'            Lookahead: LT              ('<')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: LT              ('<')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: LT              ('<')
[RULE]     RelExpr'        -> LT AddExpr RelExpr'

[MATCH]    Línea  73, Col  22  Terminal esperado: LT               Token actual: LT              ('<')
[EXPAND]   No-terminal: AddExpr          Lookahead: INT_LITERAL     ('30')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('30')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('30')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  73, Col  24  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('30')
[EXPAND]   No-terminal: Term'            Lookahead: RPAREN          (')')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: RPAREN          (')')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: RPAREN          (')')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: RPAREN          (')')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: RPAREN          (')')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: RPAREN          (')')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  73, Col  26  Terminal esperado: RPAREN           Token actual: RPAREN          (')')
[EXPAND]   No-terminal: Block            Lookahead: LBRACE          ('{')
[RULE]     Block           -> LBRACE StmtList RBRACE

[MATCH]    Línea  73, Col  28  Terminal esperado: LBRACE           Token actual: LBRACE          ('{')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('j')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('j')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('j')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  74, Col  17  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('j')
[MATCH]    Línea  74, Col  19  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: IDENTIFIER      ('j')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: IDENTIFIER      ('j')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: IDENTIFIER      ('j')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: IDENTIFIER      ('j')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: IDENTIFIER      ('j')
[RULE]     Factor          -> IDENTIFIER

[MATCH]    Línea  74, Col  21  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('j')
[EXPAND]   No-terminal: Term'            Lookahead: PLUS            ('+')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: PLUS            ('+')
[RULE]     AddExpr'        -> PLUS Term AddExpr'

[MATCH]    Línea  74, Col  23  Terminal esperado: PLUS             Token actual: PLUS            ('+')
[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('1')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('1')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  74, Col  25  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('1')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  74, Col  26  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: RBRACE          ('}')
[RULE]     StmtList        -> ε

[MATCH]    Línea  75, Col  13  Terminal esperado: RBRACE           Token actual: RBRACE          ('}')
[EXPAND]   No-terminal: StmtList         Lookahead: RBRACE          ('}')
[RULE]     StmtList        -> ε

[MATCH]    Línea  76, Col   9  Terminal esperado: RBRACE           Token actual: RBRACE          ('}')
[EXPAND]   No-terminal: ElseOpt          Lookahead: ELSE            ('else')
[RULE]     ElseOpt         -> ELSE Block

[MATCH]    Línea  76, Col  11  Terminal esperado: ELSE             Token actual: ELSE            ('else')
[EXPAND]   No-terminal: Block            Lookahead: LBRACE          ('{')
[RULE]     Block           -> LBRACE StmtList RBRACE

[MATCH]    Línea  76, Col  16  Terminal esperado: LBRACE           Token actual: LBRACE          ('{')
[EXPAND]   No-terminal: StmtList         Lookahead: INT_TYPE        ('int')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: INT_TYPE        ('int')
[RULE]     Stmt            -> VarDecl SEMICOLON

[EXPAND]   No-terminal: VarDecl          Lookahead: INT_TYPE        ('int')
[RULE]     VarDecl         -> Type COLON IDENTIFIER VarInitOpt

[EXPAND]   No-terminal: Type             Lookahead: INT_TYPE        ('int')
[RULE]     Type            -> INT_TYPE

[MATCH]    Línea  77, Col  13  Terminal esperado: INT_TYPE         Token actual: INT_TYPE        ('int')
[MATCH]    Línea  77, Col  16  Terminal esperado: COLON            Token actual: COLON           (':')
[MATCH]    Línea  77, Col  18  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('j')
[EXPAND]   No-terminal: VarInitOpt       Lookahead: ASSIGN          ('=')
[RULE]     VarInitOpt      -> ASSIGN Expr

[MATCH]    Línea  77, Col  20  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: INT_LITERAL     ('15')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: INT_LITERAL     ('15')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: INT_LITERAL     ('15')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: INT_LITERAL     ('15')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: INT_LITERAL     ('15')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: INT_LITERAL     ('15')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('15')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('15')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  77, Col  22  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('15')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  77, Col  24  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: WHILE           ('while')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: WHILE           ('while')
[RULE]     Stmt            -> WhileStmt

[EXPAND]   No-terminal: WhileStmt        Lookahead: WHILE           ('while')
[RULE]     WhileStmt       -> WHILE LPAREN Expr RPAREN Block

[MATCH]    Línea  78, Col  13  Terminal esperado: WHILE            Token actual: WHILE           ('while')
[MATCH]    Línea  78, Col  19  Terminal esperado: LPAREN           Token actual: LPAREN          ('(')
[EXPAND]   No-terminal: Expr             Lookahead: IDENTIFIER      ('j')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: IDENTIFIER      ('j')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: IDENTIFIER      ('j')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: IDENTIFIER      ('j')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: IDENTIFIER      ('j')
[RULE]     Factor          -> IDENTIFIER

[MATCH]    Línea  78, Col  20  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('j')
[EXPAND]   No-terminal: Term'            Lookahead: GT              ('>')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: GT              ('>')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: GT              ('>')
[RULE]     RelExpr'        -> GT AddExpr RelExpr'

[MATCH]    Línea  78, Col  22  Terminal esperado: GT               Token actual: GT              ('>')
[EXPAND]   No-terminal: AddExpr          Lookahead: INT_LITERAL     ('0')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('0')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('0')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  78, Col  24  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('0')
[EXPAND]   No-terminal: Term'            Lookahead: RPAREN          (')')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: RPAREN          (')')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: RPAREN          (')')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: RPAREN          (')')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: RPAREN          (')')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: RPAREN          (')')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  78, Col  25  Terminal esperado: RPAREN           Token actual: RPAREN          (')')
[EXPAND]   No-terminal: Block            Lookahead: LBRACE          ('{')
[RULE]     Block           -> LBRACE StmtList RBRACE

[MATCH]    Línea  78, Col  27  Terminal esperado: LBRACE           Token actual: LBRACE          ('{')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('j')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('j')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('j')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  79, Col  17  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('j')
[MATCH]    Línea  79, Col  19  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: IDENTIFIER      ('j')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: IDENTIFIER      ('j')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: IDENTIFIER      ('j')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: IDENTIFIER      ('j')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: IDENTIFIER      ('j')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: IDENTIFIER      ('j')
[RULE]     Factor          -> IDENTIFIER

[MATCH]    Línea  79, Col  21  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('j')
[EXPAND]   No-terminal: Term'            Lookahead: MINUS           ('-')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: MINUS           ('-')
[RULE]     AddExpr'        -> MINUS Term AddExpr'

[MATCH]    Línea  79, Col  23  Terminal esperado: MINUS            Token actual: MINUS           ('-')
[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('1')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('1')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  79, Col  25  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('1')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  79, Col  26  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: RBRACE          ('}')
[RULE]     StmtList        -> ε

[MATCH]    Línea  80, Col  13  Terminal esperado: RBRACE           Token actual: RBRACE          ('}')
[EXPAND]   No-terminal: StmtList         Lookahead: RBRACE          ('}')
[RULE]     StmtList        -> ε

[MATCH]    Línea  81, Col   9  Terminal esperado: RBRACE           Token actual: RBRACE          ('}')
[EXPAND]   No-terminal: StmtList         Lookahead: IDENTIFIER      ('i')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: IDENTIFIER      ('i')
[RULE]     Stmt            -> Assignment SEMICOLON

[EXPAND]   No-terminal: Assignment       Lookahead: IDENTIFIER      ('i')
[RULE]     Assignment      -> IDENTIFIER ASSIGN Expr

[MATCH]    Línea  83, Col   9  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('i')
[MATCH]    Línea  83, Col  11  Terminal esperado: ASSIGN           Token actual: ASSIGN          ('=')
[EXPAND]   No-terminal: Expr             Lookahead: IDENTIFIER      ('i')
[RULE]     Expr            -> OrExpr

[EXPAND]   No-terminal: OrExpr           Lookahead: IDENTIFIER      ('i')
[RULE]     OrExpr          -> AndExpr OrExpr'

[EXPAND]   No-terminal: AndExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     AndExpr         -> EqualityExpr AndExpr'

[EXPAND]   No-terminal: EqualityExpr     Lookahead: IDENTIFIER      ('i')
[RULE]     EqualityExpr    -> RelExpr EqualityExpr'

[EXPAND]   No-terminal: RelExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     RelExpr         -> AddExpr RelExpr'

[EXPAND]   No-terminal: AddExpr          Lookahead: IDENTIFIER      ('i')
[RULE]     AddExpr         -> Term AddExpr'

[EXPAND]   No-terminal: Term             Lookahead: IDENTIFIER      ('i')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: IDENTIFIER      ('i')
[RULE]     Factor          -> IDENTIFIER

[MATCH]    Línea  83, Col  13  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('i')
[EXPAND]   No-terminal: Term'            Lookahead: PLUS            ('+')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: PLUS            ('+')
[RULE]     AddExpr'        -> PLUS Term AddExpr'

[MATCH]    Línea  83, Col  15  Terminal esperado: PLUS             Token actual: PLUS            ('+')
[EXPAND]   No-terminal: Term             Lookahead: INT_LITERAL     ('1')
[RULE]     Term            -> Factor Term'

[EXPAND]   No-terminal: Factor           Lookahead: INT_LITERAL     ('1')
[RULE]     Factor          -> INT_LITERAL

[MATCH]    Línea  83, Col  17  Terminal esperado: INT_LITERAL      Token actual: INT_LITERAL     ('1')
[EXPAND]   No-terminal: Term'            Lookahead: SEMICOLON       (';')
[RULE]     Term'           -> ε

[EXPAND]   No-terminal: AddExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AddExpr'        -> ε

[EXPAND]   No-terminal: RelExpr'         Lookahead: SEMICOLON       (';')
[RULE]     RelExpr'        -> ε

[EXPAND]   No-terminal: EqualityExpr'    Lookahead: SEMICOLON       (';')
[RULE]     EqualityExpr'   -> ε

[EXPAND]   No-terminal: AndExpr'         Lookahead: SEMICOLON       (';')
[RULE]     AndExpr'        -> ε

[EXPAND]   No-terminal: OrExpr'          Lookahead: SEMICOLON       (';')
[RULE]     OrExpr'         -> ε

[MATCH]    Línea  83, Col  18  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: RBRACE          ('}')
[RULE]     StmtList        -> ε

[MATCH]    Línea  84, Col   5  Terminal esperado: RBRACE           Token actual: RBRACE          ('}')
[EXPAND]   No-terminal: StmtList         Lookahead: EXPORT          ('exportar')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: EXPORT          ('exportar')
[RULE]     Stmt            -> ExportStmt SEMICOLON

[EXPAND]   No-terminal: ExportStmt       Lookahead: EXPORT          ('exportar')
[RULE]     ExportStmt      -> EXPORT IDENTIFIER AS STRING_LITERAL

[MATCH]    Línea  87, Col   5  Terminal esperado: EXPORT           Token actual: EXPORT          ('exportar')
[MATCH]    Línea  87, Col  14  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('intro')
[MATCH]    Línea  87, Col  22  Terminal esperado: AS               Token actual: AS              ('como')
[MATCH]    Línea  87, Col  27  Terminal esperado: STRING_LITERAL   Token actual: STRING_LITERAL  ('salida.mp4"')
[MATCH]    Línea  87, Col  39  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: EXPORT          ('exportar')
[RULE]     StmtList        -> Stmt StmtList

[EXPAND]   No-terminal: Stmt             Lookahead: EXPORT          ('exportar')
[RULE]     Stmt            -> ExportStmt SEMICOLON

[EXPAND]   No-terminal: ExportStmt       Lookahead: EXPORT          ('exportar')
[RULE]     ExportStmt      -> EXPORT IDENTIFIER AS STRING_LITERAL

[MATCH]    Línea  88, Col   5  Terminal esperado: EXPORT           Token actual: EXPORT          ('exportar')
[MATCH]    Línea  88, Col  14  Terminal esperado: IDENTIFIER       Token actual: IDENTIFIER      ('cancion')
[MATCH]    Línea  88, Col  22  Terminal esperado: AS               Token actual: AS              ('como')
[MATCH]    Línea  88, Col  27  Terminal esperado: STRING_LITERAL   Token actual: STRING_LITERAL  ('salida.mp3"')
[MATCH]    Línea  88, Col  39  Terminal esperado: SEMICOLON        Token actual: SEMICOLON       (';')
[EXPAND]   No-terminal: StmtList         Lookahead: RBRACE          ('}')
[RULE]     StmtList        -> ε

[MATCH]    Línea  89, Col   1  Terminal esperado: RBRACE           Token actual: RBRACE          ('}')
[MATCH]    Línea  91, Col   1  Terminal esperado: EOF              Token actual: EOF             ('')
=== Fin del parser paso a paso ===

Warning: @resize called with too few arguments at line 18
Warning: @flip called with too few arguments at line 19
Warning: @velocidad called with too few arguments at line 20
Warning: @fadein called with too few arguments at line 21
Warning: @fadeout called with too few arguments at line 22
Warning: @agregar_musica called with too few arguments at line 25
Warning: @concatenar called with too few arguments at line 26
Warning: @cortar called with too few arguments at line 27
Warning: @flip called with too few arguments at line 33
Warning: @flip called with too few arguments at line 35
Warning: @flip called with too few arguments at line 49
Warning: @flip called with too few arguments at line 53
Warning: @velocidad called with too few arguments at line 58
Warning: @velocidad called with too few arguments at line 61
Warning: @velocidad called with too few arguments at line 69
Código Python generado en output.py

=== Iniciando análisis léxico ===
--- Análisis léxico completado sin errores. ---

=== Iniciando análisis sintáctico ===
--- Análisis sintáctico completado sin errores. ---

=== Iniciando análisis semántico ===
--- Análisis semántico completado sin errores. ---

=== Iniciando traducción a Python ===
--- Traducción a python completado sin errores. ---

=== ¡Compilación completada con éxito! ===
Código Python generado en: output.py
